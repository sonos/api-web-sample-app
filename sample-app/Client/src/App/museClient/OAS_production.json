{
  "openapi": "3.0.2",
  "info": {
    "version": "v2.0.0-production",
    "title": "Sonos Control API",
    "description": "The Sonos Control API is the primary means by which your application will interact with Sonos groups. First, discover available groups and players. Then use Control API commands to control players. For example, perform basic transport control such as play, pause, or skip. Or subscribe to receive events from the player, like track metadata.",
    "termsOfService": "https://developer.sonos.com/legal/terms-of-service"
  },
  "x-a127-services": {
    "add-x-sonos-headers": {
      "provider": "x-headers",
      "apply": {
        "pipe": "request",
        "endPoint": "target"
      },
      "options": {
        "ignoreUnresolvedVariables": true,
        "displayName": "Add_X-Sonos_Headers",
        "headers": {
          "x-sonos-muse-permissions": {
            "type": "string",
            "default": "{authz_response.permissions}",
            "description": "x-sonos-muse-permissions header"
          },
          "x-sonos-api-key": {
            "type": "string",
            "default": "{client_id}",
            "description": "x-sonos-api-key header"
          },
          "x-sonos-user-id": {
            "type": "string",
            "default": "{app_enduser}",
            "description": "x-sonos-user-id header"
          }
        }
      }
    },
    "base-apply-restrictions": {
      "provider": "apply-restrictions",
      "apply": {
        "pipe": "request",
        "endPoint": "proxy"
      },
      "options": {
        "displayName": "AR_BaseMuseRestrictions",
        "restrictionRules": {
          "allow": true
        },
        "parameters": [
          {
            "name": "oauth_only",
            "value": true
          }
        ]
      }
    },
    "x-muse-permissions": {
      "provider": "apply-restrictions",
      "options": {
        "displayName": "AR_AuthZPermissions",
        "restrictionRules": {
          "allow": true,
          "checkAll": true,
          "rules": [
            {
              "condition": "exists",
              "ref": "authz_response.permissions"
            }
          ],
          "e_reason": "Missing or invalid permissions"
        },
        "parameters": [
          {
            "name": "authz",
            "value": true
          }
        ]
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:8090/https://api.ws.sonos.com/control/api/v2",

      "description": "Full api URI",
      "variables": {
        "version": {
          "description": "MUSE API major version",
          "default": "v2",
          "enum": [
            "v1",
            "v2",
            "v3",
            "v4"
          ]
        },
        "apiTarget": {
          "description": "URL/IP of request destination",
          "default": "api.sonos.com"
        },
        "port": {
          "enum": [
            "1443",
            "443"
          ],
          "default": "1443"
        }
      }
    }
  ],
  "x-sonos-targets": [
    {
      "name": "default",
      "server": "muse-backend-apigee-origin-d1"
    }
  ],
  "tags": [
    {
      "name": "audioClip",
      "description": "The audioClip namespace enables your app or hardware integration to play short audio clips on Sonos. You’ll have the option of specifying a custom URL or using a Sonos provided sound. The clip may be mixed with any playing content. Not all devices can implement the commands in this namespace. Devices that support the commands include the AUDIO_CLIP capability in the player object (see the group object for details).\n\n Commands in this namespace are player targeted, by default.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/audioClipStatus",
          "x-muse-event-name": "audioClipStatus",
          "x-muse-since-version": "1.10.0"
        }
      ],
      "x-muse-since-version": "1.10.0"
    },
    {
      "name": "favorites",
      "description": "This namespace exposes the user favorites that are seen in the Sonos controller.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        },
        {
          "name": "load",
          "bit": "2"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/versionChanged",
          "x-muse-event-name": "favoritesVersionChange",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "global",
      "description": "This is the global namespace.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        },
        {
          "name": "read-internal",
          "bit": "2"
        },
        {
          "name": "write-internal",
          "bit": "3"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/groupCoordinatorChanged",
          "x-muse-event-name": "groupCoordinatorChanged",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "groups",
      "description": "The groups namespace enables your app or hardware integration to retrieve information about \n how players are grouped in a household and to create or modify groups.\n\n When creating or modifying groups, the group info response only includes the list of players \n in the final group. It doesn’t include a flag to show whether the changes match the original \n desired group or not. This could lead to partial successes.\n\n Additionally, this command may trigger significant player-to-player communication over the \n LAN. In some cases, you may not receive a response.\n\n As a best practice, check the final set of players returned by the command, either in the \n group info response, or by getting a list of players in the group.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/groups",
          "x-muse-event-name": "groups",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "groupVolume",
      "description": "The groupVolume namespace includes commands and events that enable your app to control and update group volume and group mute state.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/groupVolume",
          "x-muse-event-name": "groupVolume",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "households",
      "description": "Your app may have access to more than one household tied to an authorization token. Send a\n `GET` command to the households namespace endpoint to get a list of household IDs for which\n your app has access.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "musicServiceAccounts",
      "description": "The musicServiceAccounts namespace contains the match command, which your integration can use to match music service user accounts with those stored in the household.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "playback",
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        },
        {
          "name": "admin",
          "bit": "2"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/playbackStatus",
          "x-muse-event-name": "playbackStatus",
          "x-muse-since-version": "1.0.0"
        },
        {
          "$ref": "#/components/schemas/playbackError",
          "x-muse-event-name": "playbackError",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "playbackMetadata",
      "description": "The playbackMetadata namespace includes commands and events that enable your app to receive notification\n on changes to metadata for the currently playing track and the next track.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/metadataStatus",
          "x-muse-event-name": "playbackMetadataStatus",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "playbackSession",
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        },
        {
          "name": "replace-window",
          "bit": "2"
        },
        {
          "name": "bridge-context",
          "bit": "3"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/sessionError",
          "x-muse-event-name": "sessionError",
          "x-muse-since-version": "1.0.0"
        },
        {
          "$ref": "#/components/schemas/sessionInfo",
          "x-muse-event-name": "sessionInfo",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "playerVolume",
      "description": "This namespace includes commands and events that enable your app to control and update player volume and player mute state.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/playerVolume",
          "x-muse-event-name": "playerVolume",
          "x-muse-since-version": "1.0.0"
        }
      ],
      "x-muse-since-version": "1.0.0"
    },
    {
      "name": "playlists",
      "description": "The playlists namespace enables your app or hardware integration to enumerate the list of Sonos playlists in a household and load one to start playback.\n\n Listeners create Sonos playlists in the Sonos app. Sonos playlists can include tracks or playlists from multiple content services. The Sonos app displays playlists in a swimlane in My Sonos. It also adds favorited playlists to this swimlane.\n\n Note: As a best practice, use the favorites and playlists namespaces together if you use them. The Sonos app combines the results of these two namespaces in different swimlanes. If you don’t use these together, users may think some of their content is missing in your integration.",
      "x-muse-namespace-permissions": [
        {
          "name": "read",
          "bit": "0"
        },
        {
          "name": "write",
          "bit": "1"
        },
        {
          "name": "load",
          "bit": "2"
        }
      ],
      "x-muse-namespace-events": [
        {
          "$ref": "#/components/schemas/versionChanged",
          "x-muse-event-name": "playlistsVersionChange",
          "x-muse-since-version": "1.8.0"
        }
      ],
      "x-muse-since-version": "1.8.0"
    }
  ],
  "paths": {
    "/players/{playerId}/audioClip": {
      "post": {
        "operationId": "AudioClip-LoadAudioClip",
        "description": "Use the loadAudioClip command in the audioClip namespace to schedule an audio clip for playback. The command returns immediately, indicating whether the audio clip was successfully scheduled or not.\n\n The player can handle multiple audio clips and implements a simple priority system to determine playback order:\n\n A High priority audio clip can interrupt another high priority audio clip if the latter has played for more then 10 seconds.\n A high priority audio clip can interrupt a low priority audio clip at any time.\n A low priority audio clip can interrupt a low priority audio clip at any time.",
        "summary": "loadAudioClip",
        "tags": [
          "audioClip"
        ],
        "responses": {
          "200": {
            "description": "Returns an audioClip object, which list characteristics, including the id, of the enqueued audio clip.",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/audioClip"
                }
              }
            }
          },
          "400": {
            "description": "Returns an audioClip object, which list characteristics, including the id, of the enqueued audio clip.",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "Returns an audioClip object, which list characteristics, including the id, of the enqueued audio clip.",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "Returns an audioClip object, which list characteristics, including the id, of the enqueued audio clip.",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "Returns an audioClip object, which list characteristics, including the id, of the enqueued audio clip.",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "Returns an audioClip object, which list characteristics, including the id, of the enqueued audio clip.",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.10.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "AudioClip-LoadAudioClipBody",
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "User identifiable string.",
                    "x-muse-since-version": "1.10.0"
                  },
                  "appId": {
                    "type": "string",
                    "maxLength": 127,
                    "description": "This string identifies the app that created the audioClip. Companies should use their reversed Internet domain name as the identifier, similar to com.acme.app.",
                    "x-muse-since-version": "1.10.0"
                  },
                  "priority": {
                    "$ref": "#/components/schemas/priority",
                    "description": "Priority rules: LOW cannot interrupt HIGH, all other interruptions allowed",
                    "x-muse-since-version": "1.10.0"
                  },
                  "clipType": {
                    "$ref": "#/components/schemas/audioClipType",
                    "description": "(Optional) Sonos plays a built-in sound when you send this parameter. The default value is CHIME.",
                    "x-muse-since-version": "1.10.0"
                  },
                  "streamUrl": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "(Optional) Sonos will play this URL when you provide one. The caller does not need to specify a CUSTOM clipType in addition to providing the streamUrl. Sonos supports only MP3 or WAV files as audio clips.",
                    "x-muse-since-version": "1.10.0"
                  },
                  "httpAuthorization": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "(Optional) Set a string to pass in the Authorization header when fetching the streamUrl. Omit this parameter to omit the Authorization header. Sonos includes the Authorization header when the streamUrl is secure (HTTPS). Sonos supports an httpAuthorization value up to 512 bytes.",
                    "x-muse-since-version": "1.10.0"
                  },
                  "volume": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 100,
                    "exclusiveMaximum": false,
                    "minimum": 0,
                    "exclusiveMinimum": false,
                    "description": "(Optional) Audio Clip playback volume, between 0 and 100. There are internal upper and lower limits for the audio clip volume level in order to prevent the audio clip from being too loud or inaudible. If the parameter is beyond those limits, Sonos automatically adjusts the audio clip volume to the lower or upper limit. The default behavior is to playback at the current player volume.",
                    "x-muse-since-version": "1.10.0"
                  }
                },
                "required": [
                  "name",
                  "appId"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.10.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.10.0"
        }
      ],
      "description": "The audioClip namespace enables your app or hardware integration to play short audio clips on Sonos. You’ll have the option of specifying a custom URL or using a Sonos provided sound. The clip may be mixed with any playing content. Not all devices can implement the commands in this namespace. Devices that support the commands include the AUDIO_CLIP capability in the player object (see the group object for details).\n\n Commands in this namespace are player targeted, by default."
    },
    "/players/{playerId}/audioClip/subscription": {
      "post": {
        "operationId": "AudioClip-Subscribe",
        "description": "Use this command to subscribe to events in the audioClip namespace.",
        "summary": "subscribe",
        "tags": [
          "audioClip"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.10.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.10.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.10.0"
        }
      ],
      "description": "The audioClip namespace enables your app or hardware integration to play short audio clips on Sonos. You’ll have the option of specifying a custom URL or using a Sonos provided sound. The clip may be mixed with any playing content. Not all devices can implement the commands in this namespace. Devices that support the commands include the AUDIO_CLIP capability in the player object (see the group object for details).\n\n Commands in this namespace are player targeted, by default.",
      "delete": {
        "operationId": "AudioClip-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the audioClip namespace.",
        "summary": "unsubscribe",
        "tags": [
          "audioClip"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.10.0"
      }
    },
    "/players/{playerId}/audioClip/{id}": {
      "delete": {
        "operationId": "AudioClip-CancelAudioClip",
        "description": "Use the cancelAudioClip command in the audioClip namespace to cancel a specific audio clip from playing. Sonos sends an error if it has already finished playing the selected audio clip.",
        "summary": "cancelAudioClip",
        "tags": [
          "audioClip"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.10.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.10.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.10.0"
        },
        {
          "in": "path",
          "name": "id",
          "description": "Target id",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.10.0"
        }
      ],
      "description": "The audioClip namespace enables your app or hardware integration to play short audio clips on Sonos. You’ll have the option of specifying a custom URL or using a Sonos provided sound. The clip may be mixed with any playing content. Not all devices can implement the commands in this namespace. Devices that support the commands include the AUDIO_CLIP capability in the player object (see the group object for details).\n\n Commands in this namespace are player targeted, by default."
    },
    "/groups/{groupId}/favorites": {
      "post": {
        "operationId": "Favorites-LoadFavorite",
        "description": "The loadFavorite command in the favorites namespace activates a favorite within the default playback session. This command interrupts any active private playback sessions. Sonos adds album, tracklist, and track favorites to the queue and activates the queue. This prevents your app from overwriting user-curated queues.",
        "summary": "loadFavorite",
        "tags": [
          "favorites"
        ],
        "responses": {
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "load"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Favorites-LoadFavoriteBody",
                "type": "object",
                "properties": {
                  "favoriteId": {
                    "type": "string",
                    "maxLength": 36,
                    "description": "The identifier of the favorite. You can find this in the favoriteList object in the getFavorites response.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "action": {
                    "$ref": "#/components/schemas/queueAction",
                    "description": "(Optional) Controls how the the player inserts the favorite into the shared queue, such as APPEND, INSERT, INSERT_NEXT, or REPLACE. Not used when the favorite is a radio station (programmed or streamed). If omitted, defaults to append.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "playModes": {
                    "$ref": "#/components/schemas/playMode",
                    "description": "(Optional) Defines the functionality of one or more play modes. You can set these to customize shuffle, repeat, repeat-one and crossfade. The player ignores this parameter when the loaded favorite does not allow custom play modes, such as for streaming radio stations.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "playOnCompletion": {
                    "type": "boolean",
                    "description": "(Optional) If true, the player automatically starts playback. If false or not provided, the player remains in the PLAYBACK_IDLE state.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "favoriteId"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace exposes the user favorites that are seen in the Sonos controller."
    },
    "/households/{householdId}/favorites": {
      "get": {
        "operationId": "Favorites-GetFavorites",
        "description": "Use the getFavorites command in the favorites namespace to get the list of Sonos favorites for a household. Favorites do not include pinned items (any non-playable containers pinned to My Sonos) or Sonos playlists. See the Save your favorites section in the Sonos user guide and Add favorites for details. The player limits the number of Sonos favorites to 70.\n An array of objects is returned such that a developer can implement the favorites picker from the Sonos controller.",
        "summary": "getFavorites",
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "Returns a favoritesList object, which is an array of favorite objects with a version number.\n\n In the event of a failure, returns a globalError.",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/favoritesList"
                }
              }
            }
          },
          "400": {
            "description": "Returns a favoritesList object, which is an array of favorite objects with a version number.\n\n In the event of a failure, returns a globalError.",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "Returns a favoritesList object, which is an array of favorite objects with a version number.\n\n In the event of a failure, returns a globalError.",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "Returns a favoritesList object, which is an array of favorite objects with a version number.\n\n In the event of a failure, returns a globalError.",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "Returns a favoritesList object, which is an array of favorite objects with a version number.\n\n In the event of a failure, returns a globalError.",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "Returns a favoritesList object, which is an array of favorite objects with a version number.\n\n In the event of a failure, returns a globalError.",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace exposes the user favorites that are seen in the Sonos controller."
    },
    "/households/{householdId}/favorites/subscription": {
      "post": {
        "operationId": "Favorites-Subscribe",
        "description": "Use this command to subscribe to events in the favorites namespace.\n\n When subscribed, Sonos sends asynchronous versionChanged events when users update their Sonos favorites. Your app can then choose to fetch the favorites as needed whenever the version changes. This is because the FavoritesList object can be large for asynchronous events.",
        "summary": "subscribe",
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace exposes the user favorites that are seen in the Sonos controller.",
      "delete": {
        "operationId": "Favorites-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the favorites namespace.",
        "summary": "unsubscribe",
        "tags": [
          "favorites"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/groups/{groupId}/groups/modifyGroupMembers": {
      "post": {
        "operationId": "Groups-ModifyGroupMembers",
        "description": "Use the modifyGroupMembers command in the groups namespace to add players to and remove\n players from a group. In response to this command, Sonos first adds players to the group,\n then removes players from the group.",
        "summary": "modifyGroupMembers",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupInfo"
                }
              }
            }
          },
          "400": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_PARAMETER",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/playerSetError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Groups-ModifyGroupMembersBody",
                "type": "object",
                "properties": {
                  "playerIdsToAdd": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "An array of player ID strings of players to add to the group."
                    },
                    "maxItems": 32,
                    "x-muse-since-version": "1.0.0"
                  },
                  "playerIdsToRemove": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "An array of player ID strings of players to remove from the group."
                    },
                    "maxItems": 32,
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "playerIdsToAdd",
                  "playerIdsToRemove"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groups namespace enables your app or hardware integration to retrieve information about \n how players are grouped in a household and to create or modify groups.\n\n When creating or modifying groups, the group info response only includes the list of players \n in the final group. It doesn’t include a flag to show whether the changes match the original \n desired group or not. This could lead to partial successes.\n\n Additionally, this command may trigger significant player-to-player communication over the \n LAN. In some cases, you may not receive a response.\n\n As a best practice, check the final set of players returned by the command, either in the \n group info response, or by getting a list of players in the group."
    },
    "/groups/{groupId}/groups/setGroupMembers": {
      "post": {
        "operationId": "Groups-SetGroupMembers",
        "description": "Use the setGroupMembers command in the groups namespace to replace the players in an\n existing group with a new set.",
        "summary": "setGroupMembers",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupInfo"
                }
              }
            }
          },
          "400": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_PARAMETER",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/playerSetError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo \n object may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Groups-SetGroupMembersBody",
                "type": "object",
                "properties": {
                  "playerIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "An array of player ID strings corresponding to the new set of players for the group."
                    },
                    "maxItems": 32,
                    "x-muse-since-version": "1.0.0"
                  },
                  "areaIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "(Optional) List of source areaIds in the group. Emitted in groupInfo events. As of \n version 1.19.1, this can include the \"Everywhere\" area ID. If it does, this indicates \n that the group includes all visible players."
                    },
                    "maxItems": 33,
                    "x-muse-since-version": "1.14.0"
                  }
                },
                "required": [
                  "playerIds"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groups namespace enables your app or hardware integration to retrieve information about \n how players are grouped in a household and to create or modify groups.\n\n When creating or modifying groups, the group info response only includes the list of players \n in the final group. It doesn’t include a flag to show whether the changes match the original \n desired group or not. This could lead to partial successes.\n\n Additionally, this command may trigger significant player-to-player communication over the \n LAN. In some cases, you may not receive a response.\n\n As a best practice, check the final set of players returned by the command, either in the \n group info response, or by getting a list of players in the group."
    },
    "/households/{householdId}/groups": {
      "get": {
        "operationId": "Groups-GetGroups",
        "description": "Use the getGroups command in the groups namespace to get information about groups\n and players in a household.",
        "summary": "getGroups",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "The groups object in the groups namespace describes the current set of logical players \n and groups in the household. Use the getGroups command to get a groups object.",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groups"
                }
              }
            }
          },
          "400": {
            "description": "The groups object in the groups namespace describes the current set of logical players \n and groups in the household. Use the getGroups command to get a groups object.",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "The groups object in the groups namespace describes the current set of logical players \n and groups in the household. Use the getGroups command to get a groups object.",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "The groups object in the groups namespace describes the current set of logical players \n and groups in the household. Use the getGroups command to get a groups object.",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "The groups object in the groups namespace describes the current set of logical players \n and groups in the household. Use the getGroups command to get a groups object.",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "The groups object in the groups namespace describes the current set of logical players \n and groups in the household. Use the getGroups command to get a groups object.",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "name": "includeDeviceInfo",
          "in": "query",
          "description": "The response will include the deviceInfo for each player object when this\n argument is present and true.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groups namespace enables your app or hardware integration to retrieve information about \n how players are grouped in a household and to create or modify groups.\n\n When creating or modifying groups, the group info response only includes the list of players \n in the final group. It doesn’t include a flag to show whether the changes match the original \n desired group or not. This could lead to partial successes.\n\n Additionally, this command may trigger significant player-to-player communication over the \n LAN. In some cases, you may not receive a response.\n\n As a best practice, check the final set of players returned by the command, either in the \n group info response, or by getting a list of players in the group."
    },
    "/households/{householdId}/groups/createGroup": {
      "post": {
        "operationId": "Groups-CreateGroup",
        "description": "Use the createGroup command in the groups namespace to create a new group from a list\n of players. The player returns a group object with the group ID. This may be an existing\n group ID if an existing group is a subset of the new group. In this case, Sonos may\n build the new group by adding new players to the existing group.",
        "summary": "createGroup",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo object \n may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupInfo"
                }
              }
            }
          },
          "400": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo object \n may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_PARAMETER",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/playerSetError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo object \n may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo object \n may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo object \n may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "Returns a groupInfo object, which currently only includes a group object. The groupInfo object \n may include additional information in the future.\n\n Muse v2 sends playerSetError which includes playerIds array since version 1.17.0",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Groups-CreateGroupBody",
                "type": "object",
                "properties": {
                  "playerIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "An array of player ID strings to group."
                    },
                    "maxItems": 32,
                    "x-muse-since-version": "1.0.0"
                  },
                  "musicContextGroupId": {
                    "type": "string",
                    "maxLength": 35,
                    "description": "(Optional) The group containing the audio that you want to use. If empty or not provided, \n the new group will not contain any audio.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "areaIds": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "(Optional) List of source areaIds in the group. Emitted in groupInfo events. As of version \n 1.19.1, this can include the \"Everywhere\" area ID. If it does, this indicates that the group \n includes all visible players."
                    },
                    "maxItems": 33,
                    "x-muse-since-version": "1.14.0"
                  }
                },
                "required": [
                  "playerIds"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groups namespace enables your app or hardware integration to retrieve information about \n how players are grouped in a household and to create or modify groups.\n\n When creating or modifying groups, the group info response only includes the list of players \n in the final group. It doesn’t include a flag to show whether the changes match the original \n desired group or not. This could lead to partial successes.\n\n Additionally, this command may trigger significant player-to-player communication over the \n LAN. In some cases, you may not receive a response.\n\n As a best practice, check the final set of players returned by the command, either in the \n group info response, or by getting a list of players in the group."
    },
    "/households/{householdId}/groups/subscription": {
      "post": {
        "operationId": "Groups-Subscribe",
        "description": "Use this command to subscribe to events in the groups namespace.",
        "summary": "subscribe",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groups namespace enables your app or hardware integration to retrieve information about \n how players are grouped in a household and to create or modify groups.\n\n When creating or modifying groups, the group info response only includes the list of players \n in the final group. It doesn’t include a flag to show whether the changes match the original \n desired group or not. This could lead to partial successes.\n\n Additionally, this command may trigger significant player-to-player communication over the \n LAN. In some cases, you may not receive a response.\n\n As a best practice, check the final set of players returned by the command, either in the \n group info response, or by getting a list of players in the group.",
      "delete": {
        "operationId": "Groups-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the groups namespace.",
        "summary": "unsubscribe",
        "tags": [
          "groups"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/groups/{groupId}/groupVolume": {
      "post": {
        "operationId": "GroupVolume-SetVolume",
        "description": "Use the setVolume command in the groupVolume namespace to set group volume to a specific level and unmute the group if muted.\n\n When your app sets the group volume, the group coordinator calculates the required changes to the volume level for each player in the group so that the result is the average volume level of the group as a whole. The group coordinator then adjusts its local volume and initiates network transactions with the other players in the group to adjust their volumes accordingly. While players adjust their volumes, the group coordinator may generate one or more groupVolume events.\n\n Since this command can generate additional network transactions and events, your app should optimize how often it is invoked to maintain a good user experience without flooding the network, such as when implementing a touch screen volume slider that controls a group of five players.",
        "summary": "setVolume",
        "tags": [
          "groupVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "GroupVolume-SetVolumeBody",
                "type": "object",
                "properties": {
                  "volume": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 100,
                    "exclusiveMaximum": false,
                    "minimum": 0,
                    "exclusiveMinimum": false,
                    "description": "The new group volume as an integer between 0 and 100, inclusive. If your app submits a number outside of this range, you will receive an ERROR_INVALID_PARAMETER error.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "volume"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groupVolume namespace includes commands and events that enable your app to control and update group volume and group mute state.",
      "get": {
        "operationId": "GroupVolume-GetVolume",
        "description": "Use the getVolume command in the groupVolume namespace to get the volume and mute state of a group.",
        "summary": "getVolume",
        "tags": [
          "groupVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupVolume"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/groups/{groupId}/groupVolume/mute": {
      "post": {
        "operationId": "GroupVolume-SetMute",
        "description": "Use the setMute command in the groupVolume namespace to mute and unmute the group.\n\n The group’s mute state is independent of its group volume. For example a group’s mute state can be true although its group volume is still 20, and the user will not hear any audio coming from the group of players. Individual player volume values are stored by each player in the group while muted, which allows the group to retain the relative volume of players in the group. That is important information to preserve, since users may have carefully configured the individual player volumes in the group with a Sonos controller. Your app should not mute the group by calling setVolume with zero volume, otherwise the relative volume of players in the group will be lost.\n\n If some players in the group are muted and others are not, calling setMute to mute the group will mute all the players in the group. The individual player’s mute state prior to calling setMute is not preserved.\n\n To get the current group’s mute state, use the getVolume command or subscribe to the groupVolume event.",
        "summary": "setMute",
        "tags": [
          "groupVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "GroupVolume-SetMuteBody",
                "type": "object",
                "properties": {
                  "muted": {
                    "type": "boolean",
                    "description": "The desired mute state of the group: true for muted and false for not muted.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "muted"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groupVolume namespace includes commands and events that enable your app to control and update group volume and group mute state."
    },
    "/groups/{groupId}/groupVolume/relative": {
      "post": {
        "operationId": "GroupVolume-SetRelativeVolume",
        "description": "Use the setRelativeVolume command in the groupVolume namespace to increase or decrease group volume, and unmute the group if muted.\n\n Your app can use setRelativeVolume instead of setVolume when the user intent is to increase or decrease the group volume, but not to set the final volume to a particular value. For example, your app should use setRelativeVolume when the user presses hard volume plus/minus buttons on a mobile device.\n\n The group will automatically limit the final volume set within the valid range, so your app does not need to worry about that.\n\n See setVolume for more details on how group volume works.",
        "summary": "setRelativeVolume",
        "tags": [
          "groupVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "GroupVolume-SetRelativeVolumeBody",
                "type": "object",
                "properties": {
                  "volumeDelta": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 100,
                    "exclusiveMaximum": false,
                    "minimum": -100,
                    "exclusiveMinimum": false,
                    "description": "An integer between -100 and 100 (including those values) indicating the amount to increase or decrease the current group volume. The group coordinator adds this value to the current group volume and then keeps the result in the range of 0 to 100.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "volumeDelta"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groupVolume namespace includes commands and events that enable your app to control and update group volume and group mute state."
    },
    "/groups/{groupId}/groupVolume/subscription": {
      "post": {
        "operationId": "GroupVolume-Subscribe",
        "description": "Use this command to subscribe to events in the groupVolume namespace.",
        "summary": "subscribe",
        "tags": [
          "groupVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The groupVolume namespace includes commands and events that enable your app to control and update group volume and group mute state.",
      "delete": {
        "operationId": "GroupVolume-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the groupVolume namespace.",
        "summary": "unsubscribe",
        "tags": [
          "groupVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/households": {
      "get": {
        "operationId": "Households-GetHouseholds",
        "description": "The getHouseholds command requests information on the households that can be acted upon,\n based upon the access token used when calling this API. There are no parameters for this command.\n\n If successful, Sonos responds with an array of household objects.",
        "summary": "getHouseholds",
        "tags": [
          "households"
        ],
        "responses": {
          "200": {
            "description": "This command returns a list of households.",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/households"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "name": "connectedOnly",
          "in": "query",
          "description": "Lookup all the households, connected or disconnected, when set to false.",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Your app may have access to more than one household tied to an authorization token. Send a\n `GET` command to the households namespace endpoint to get a list of household IDs for which\n your app has access."
    },
    "/households/{householdId}/households/name": {
      "post": {
        "operationId": "Households-SetName",
        "description": "Set the user-configured name for the muse household.",
        "summary": "setName",
        "tags": [
          "households"
        ],
        "responses": {
          "200": {
            "description": "This command returns OK if successful, globalError otherwise.",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "This command returns OK if successful, globalError otherwise.",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "This command returns OK if successful, globalError otherwise.",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "This command returns OK if successful, globalError otherwise.",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "This command returns OK if successful, globalError otherwise.",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "This command returns OK if successful, globalError otherwise.",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.27.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Your app may have access to more than one household tied to an authorization token. Send a\n `GET` command to the households namespace endpoint to get a list of household IDs for which\n your app has access."
    },
    "/households/{householdId}/musicServiceAccounts/match": {
      "post": {
        "operationId": "MusicServiceAccounts-Match",
        "description": "Use the match command in the musicServiceAccounts namespace to get the account ID of a music service user account from the player.\n\n All players in the household return the same accounts. Changes made to a player are automatically replicated throughout the household.",
        "summary": "match",
        "tags": [
          "musicServiceAccounts"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/musicServiceAccount"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "MusicServiceAccounts-MatchBody",
                "type": "object",
                "properties": {
                  "userIdHashCode": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "Opaque hash of the user account. You must use the same algorithm used by your SMAPI server. See getDeviceAuthToken and getUserInfo SMAPI requests for details.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "nickname": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "The name for the music service account presented to the user when they view their account from the Sonos app.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "serviceId": {
                    "type": "string",
                    "maxLength": 10,
                    "description": "The unique identifier for the music service. Maximum length of 20 characters.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "linkCode": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "(Optional) The link code generated for device authentication. Your SMAPI service can also send this to the player in the getAppLink SMAPI request. The player can send it back in the getDeviceAuthToken SMAPI request.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "linkDeviceId": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "(Optional) Private data associated with the link code to prevent phishing. Like linkCode, also sent in the getAppLink SMAPI request and returned in the getDeviceAuthToken SMAPI request.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "userIdHashCode",
                  "nickname",
                  "serviceId"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The musicServiceAccounts namespace contains the match command, which your integration can use to match music service user accounts with those stored in the household."
    },
    "/groups/{groupId}/playback": {
      "get": {
        "operationId": "Playback-GetPlaybackStatus",
        "description": "Use the getPlaybackStatus command in the playback namespace get the current playback status (transport state) for the group, such as PLAYBACK_STATE_IDLE, PLAYBACK_STATE_BUFFERING, or PLAYBACK_STATE_PLAYING. See the playbackStatus object for details.",
        "summary": "getPlaybackStatus",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackStatus"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/lineIn": {
      "post": {
        "operationId": "Playback-LoadLineIn",
        "description": "Use the loadLineIn command in the playback namespace to change the current group source to the line-in source of a specified player. This can be be any player in the household that supports line-in. See Using Line-In on Sonos on the Sonos Support site for more details about the line-in capabilities of our players.\n\n You can tell whether a player has line-in capabilities with the LINE_IN value in the capabilities object. See the groups object for details.\n\n The player will switch away from the line-in source when the hardware detects that the user has physically unplugged the line-in cable.",
        "summary": "loadLineIn",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.6.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Playback-LoadLineInBody",
                "type": "object",
                "properties": {
                  "deviceId": {
                    "type": "string",
                    "maxLength": 24,
                    "description": "(Optional) Represents the line-in source, any player in the household that supports line-in. The default value is the local deviceId. This is the same as the player ID returned in the player object.",
                    "x-muse-since-version": "1.6.0"
                  },
                  "playOnCompletion": {
                    "type": "boolean",
                    "description": "(Optional) If true, start playback after loading the line-in source. If false, the player loads the cloud queue, but requires the play command to begin. If not provided, the default value is false.",
                    "x-muse-since-version": "1.6.0"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/pause": {
      "post": {
        "operationId": "Playback-Pause",
        "description": "Use the pause command in the playback namespace to pause group playback.\n\n After a successful pause command, if your app is subscribed to the playback namespace, it will receive a playbackStatus event with either PLAYBACK_STATE_PAUSED or PLAYBACK_STATE_IDLE, depending on the audio source loaded on the group.",
        "summary": "pause",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_NO_CONTENT"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/play": {
      "post": {
        "operationId": "Playback-Play",
        "description": "Use the play command in the playback namespace to initiate group playback.\n\n After a successful play command, if your app is subscribed to the playback namespace, it may first receive a playbackStatus event with PLAYBACK_STATE_BUFFERING before another event with PLAYBACK_STATE_PLAYING. Sonos players will buffer the audio ahead of time when possible, in order to provide the shortest time to play for the user, and to prevent any audio gaps between tracks.",
        "summary": "play",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_FAILED",
              "ERROR_PLAYBACK_NO_CONTENT"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/playMode": {
      "post": {
        "operationId": "Playback-SetPlayModes",
        "description": "Use the setPlayModes command in the playback namespace to change group play modes, such as repeat, repeat one track, shuffle, and crossfade. See Play Modes for details.\n\n Configure a play mode in the playModes array by adding a “true” or “false” value for the mode, or omit a play mode to leave it unchanged.",
        "summary": "setPlayModes",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "Request was successful.",
            "x-muse-error-codes": [
              "OK"
            ]
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Playback-SetPlayModesBody",
                "type": "object",
                "properties": {
                  "playModes": {
                    "$ref": "#/components/schemas/playMode",
                    "description": "An array of play modes that define the functionality of one or more play modes: repeat, repeatOne, shuffle, and crossfade. Any omitted play modes remain unchanged. See the playMode type for details.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "playModes"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/seek": {
      "post": {
        "operationId": "Playback-Seek",
        "description": "Use the seek command in the playback namespace to go to a specific position in the current track. Optionally add the cloud queue itemId to target a specific track.\n\n Use itemId to ensure the group seeks on the current item. If the current item’s itemId does not match the one provided, the player returns an ERROR_INVALID_OBJECT_ID error.",
        "summary": "seek",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "*Success Code*: `200 OK`\n\n *Content Examples*:\n 1. When including the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000,\n \"itemId\" : \"123\"\n }\n ```\n 2. When omitting the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000\n }\n ```",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "*Success Code*: `200 OK`\n\n *Content Examples*:\n 1. When including the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000,\n \"itemId\" : \"123\"\n }\n ```\n 2. When omitting the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000\n }\n ```",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "*Success Code*: `200 OK`\n\n *Content Examples*:\n 1. When including the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000,\n \"itemId\" : \"123\"\n }\n ```\n 2. When omitting the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000\n }\n ```",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "*Success Code*: `200 OK`\n\n *Content Examples*:\n 1. When including the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000,\n \"itemId\" : \"123\"\n }\n ```\n 2. When omitting the optional `itemId`.\n ```javascript\n {\n \"positionMillis\" : 30000\n }\n ```",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_DISALLOWED_BY_POLICY",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_NO_CONTENT"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Playback-SeekBody",
                "type": "object",
                "properties": {
                  "itemId": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "(Optional) The identifier for the item. If included and it does not match the currently playing item, the command fails. This ensures that playback does not jump back to a track if a user starts to scrub just as the player begins to play the next item or due to latency.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "positionMillis": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Position within track in milliseconds. If this value exceeds the current track duration time, Sonos moves to the end of the current track, which results in a skip to the next track.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "positionMillis"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/seekRelative": {
      "post": {
        "operationId": "Playback-SeekRelative",
        "description": "Use the seekRelative command in the playback namespace to seek to the a relative position in the current track. Optionally add the cloud queue itemId to target a specific track.\n\n Use itemId to ensure the group seeks on the current item. If the current item’s itemId does not match the one provided, the player returns ERROR_INVALID_OBJECT_ID.",
        "summary": "seekRelative",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_DISALLOWED_BY_POLICY",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_NO_CONTENT"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Playback-SeekRelativeBody",
                "type": "object",
                "properties": {
                  "itemId": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "(Optional) The identifier for the item. If this parameter does not match the currently playing item, the command fails. This ensures that playback does not jump back to a track if a user starts to scrub just as the player begins to play the next item.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "deltaMillis": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Relative position within track in milliseconds. If this value exceeds the current track duration time, Sonos moves to the end of the current track, which results in a skip to the next track.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "deltaMillis"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/skipBack": {
      "post": {
        "operationId": "Playback-SkipBack",
        "description": "Use the skipBack command in the playback namespace to rewind to beginning of track if it has been playing long enough(3 seconds), otherwise skip to previous track.\n\n Not all audio sources allow multiple tracks. For example, when a group is streaming an Internet radio station, there is no previous track to skip to. If you send a skipBack command when the audio source does not support multiple tracks, your app will receive an ERROR_PLAYBACK_FAILED if it tries to skip to previous track, but audio will continue playing.",
        "summary": "skipBack",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_DISALLOWED_BY_POLICY",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_NO_CONTENT",
              "ERROR_SKIP_LIMIT_REACHED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.26.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/skipToNextTrack": {
      "post": {
        "operationId": "Playback-SkipToNextTrack",
        "description": "Use the skipToNextTrack command in the playback namespace to skip to the next track.\n\n Not all audio sources allow multiple tracks. For example, when a group is streaming an Internet radio station, there is no next track to skip to. If you send a skipToNextTrack command when the audio source does not support multiple tracks, your app will receive an ERROR_PLAYBACK_FAILED, but the audio will continue playing.",
        "summary": "skipToNextTrack",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_DISALLOWED_BY_POLICY",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_NO_CONTENT",
              "ERROR_SKIP_LIMIT_REACHED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/skipToPreviousTrack": {
      "post": {
        "operationId": "Playback-SkipToPreviousTrack",
        "description": "Use the skipToPreviousTrack command in the playback namespace to skip to the previous track.\n\n Not all audio sources allow multiple tracks. For example, when a group is streaming an Internet radio station, there is no previous track to skip to. If you send a skipToPreviousTrack command when the audio source does not support multiple tracks, your app will receive an ERROR_PLAYBACK_FAILED, but audio will continue playing.",
        "summary": "skipToPreviousTrack",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_DISALLOWED_BY_POLICY",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_NO_CONTENT",
              "ERROR_SKIP_LIMIT_REACHED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playback/subscription": {
      "post": {
        "operationId": "Playback-Subscribe",
        "description": "Use this command to subscribe to events in the playback namespace.",
        "summary": "subscribe",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses.",
      "delete": {
        "operationId": "Playback-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the playback namespace.",
        "summary": "unsubscribe",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/groups/{groupId}/playback/togglePlayPause": {
      "post": {
        "operationId": "Playback-TogglePlayPause",
        "description": "Use the togglePlayPause command in the playback namespace to toggle the playback state on the given group, if possible. Upon completion of the command, the player sends playbackStatus events to all subscribers. When toggling from pause to play, this functions similar to the play command. When transitioning from play to pause, it functions like the pause command. See those commands for more details about the functionality of those states.",
        "summary": "togglePlayPause",
        "tags": [
          "playback"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_NO_CONTENT",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_PLAYBACK_FAILED",
              "ERROR_PLAYBACK_NO_CONTENT"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playbackError"
                }
              }
            }
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.7.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The \"playback\" namespace contains general commands and events that can be used by clients that\n wish to control the transport state of a group but don't need to know exactly what is currently\n playing. The playback namespace also exposes the current and available play modes (repeat,\n shuffle, crossfade) and playback policies (canSkip, etc.). Commands in this namespace can return\n global errors or playbackError responses."
    },
    "/groups/{groupId}/playbackMetadata": {
      "get": {
        "operationId": "PlaybackMetadata-GetMetadataStatus",
        "description": "Use this command to poll for metadata changes. This command returns a metadataStatus object for the target group.",
        "summary": "getMetadataStatus",
        "tags": [
          "playbackMetadata"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/metadataStatus"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.10.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The playbackMetadata namespace includes commands and events that enable your app to receive notification\n on changes to metadata for the currently playing track and the next track."
    },
    "/groups/{groupId}/playbackMetadata/subscription": {
      "post": {
        "operationId": "PlaybackMetadata-Subscribe",
        "description": "Use this command to subscribe to events in the playbackMetadata namespace.\n\n Returns an empty body with a success value of true if successful and sends a metadataStatus event only to the subscriber.",
        "summary": "subscribe",
        "tags": [
          "playbackMetadata"
        ],
        "responses": {
          "200": {
            "description": "Request was successful.",
            "x-muse-error-codes": [
              "OK"
            ]
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "The playbackMetadata namespace includes commands and events that enable your app to receive notification\n on changes to metadata for the currently playing track and the next track.",
      "delete": {
        "operationId": "PlaybackMetadata-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the playbackMetadata namespace.\n\n Returns an empty body with a success value of true if successful.",
        "summary": "unsubscribe",
        "tags": [
          "playbackMetadata"
        ],
        "responses": {
          "200": {
            "description": "Request was successful.",
            "x-muse-error-codes": [
              "OK"
            ]
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/groupCoordinatorChanged"
                }
              }
            }
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/groups/{groupId}/playbackSession": {
      "post": {
        "operationId": "PlaybackSession-CreateSession",
        "description": "Use the createSession command in the playbackSession namespace to unconditionally create a new session and clobber any existing sessions.\n\n Use appContext to determine how multiple instances of your app can share control of a session. For example, if you provide a user account identifier as appContext, then two instances of your app logged into the same user account would be able to control the same session on a group. If you choose to implement your app to always provide an appContext that is unique for all app instances, then only one app instance can control a session at any time.\n\n Use customData to save information in the session that your app finds useful. For example, your app could store a playlist identifier in customData, so that another app instance could automatically load the right playlist when joining a session.",
        "summary": "createSession",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sessionStatus"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_ACCOUNT_INVALID_ID",
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_SESSION_IN_PROGRESS",
              "ERROR_SESSION_JOIN_FAILED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/accountError"
                    },
                    {
                      "$ref": "#/components/schemas/sessionError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlaybackSession-CreateSessionBody",
                "type": "object",
                "properties": {
                  "appId": {
                    "type": "string",
                    "maxLength": 127,
                    "description": "Identifies your app. This should be a reverse DNS name of the form “com.companyname.appname” or similar. It is used together with appContext to determine if a session can be joined or not. As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.\n\n The sum total length of appId and appContext must be less than 255 bytes. Otherwise, the player will return an error.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "appContext": {
                    "type": "string",
                    "maxLength": 127,
                    "description": "Instance data for your app, an opaque string that you can use to identify a particular user account, for example. It is used together with appId to determine if a session can be joined or not. As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.\n\n The sum total length of appId and appContext must be less than 255 bytes. Otherwise, the player will return an error.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "accountId": {
                    "type": "string",
                    "maxLength": 13,
                    "description": "(Optional) The music service account to use on Sonos for playback in the session. See the MusicObjectId for more details about this parameter. If your app submits an invalid accountId, you will receive an ERROR_INVALID_PARAMETER error. An accountId is invalid when it doesn’t match a stored account on the player.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "customData": {
                    "type": "string",
                    "maxLength": 1023,
                    "description": "(Optional) A blob of text stored by the player and passed back to any other clients that successfully join an existing session. This data (up to 1023 bytes) is stored within the session. The player truncates blobs of text that are longer than 1023 bytes and returns the truncated string in the command response. The default value is an empty string (“”). As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "appId",
                  "appContext"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/groups/{groupId}/playbackSession/join": {
      "post": {
        "operationId": "PlaybackSession-JoinSession",
        "description": "Warning: This command, along with all other playbackSession commands used to join or leave sessions over a persistent connections with the player, has been deprecated. The client must still create a session with the createSession command, and the generated sessionId should be cached and used with subsequent commands.\n\n Use the joinSession command in the playbackSession namespace to join an existing session in the group. To successfully join the session your app will have to provide the same appId and appContext that was used when creating the session.",
        "summary": "joinSession",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sessionStatus"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_SESSION_IN_PROGRESS",
              "ERROR_SESSION_JOIN_FAILED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/sessionError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0",
        "deprecated": true,
        "x-muse-deprecated-version": "1.24.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlaybackSession-JoinSessionBody",
                "type": "object",
                "properties": {
                  "appId": {
                    "type": "string",
                    "maxLength": 127,
                    "description": "Identifies your app. This should be a reverse DNS name of the form “com.companyname.appname” or similar. It is used together with appContext to determine if a session can be joined or not. As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.\n\n The sum total length of appId and appContext must be less than 255 bytes. Otherwise, the player will return an error.",
                    "x-muse-since-version": "1.0.0",
                    "deprecated": true,
                    "x-muse-deprecated-version": "1.24.0"
                  },
                  "appContext": {
                    "type": "string",
                    "maxLength": 127,
                    "description": "Instance data for your app, an opaque string that you can use to identify a particular user account, for example. It is used together with appId to determine if a session can be joined or not. As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.\n\n The sum total length of appId and appContext must be less than 255 bytes. Otherwise, the player will return an error.",
                    "x-muse-since-version": "1.0.0",
                    "deprecated": true,
                    "x-muse-deprecated-version": "1.24.0"
                  }
                },
                "required": [
                  "appId",
                  "appContext"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/groups/{groupId}/playbackSession/joinOrCreate": {
      "post": {
        "operationId": "PlaybackSession-JoinOrCreateSession",
        "description": "Warning: This command, along with all other playbackSession commands used to join or leave sessions over a persistent connections with the player, has been deprecated. The client must still create a session with the createSession command, and the generated sessionId should be cached and used with subsequent commands.\n\n Use the joinOrCreateSession command in the playbackSession namespace to join an existing session in the group, if the appId and appContext match the existing session’s. If there is no current session and no other source is playing, joinOrCreateSession creates a new session and joins it.\n\n While this same behavior can be achieved by first calling joinSession and then conditionally calling createSession, using joinOrCreateSession guarantees that another app cannot create a session in between the two commands.\n\n Use appContext to determine how multiple instances of your app can share control of a session. For example, if you provide a user account identifier as appContext, then two instances of your app logged into the same user account would be able to control the same session on a group. If you choose to implement your app to always provide an appContext that is unique for all app instances, then only one app instance can control a session at any time.\n\n Use customData to save information in the session that your app finds useful. For example, your app could store a playlist identifier in customData, so that another app instance could automatically load the right playlist when joining a session.",
        "summary": "joinOrCreateSession",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sessionStatus"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_ACCOUNT_INVALID_ID",
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_SESSION_IN_PROGRESS",
              "ERROR_SESSION_JOIN_FAILED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/accountError"
                    },
                    {
                      "$ref": "#/components/schemas/sessionError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "deprecated": true,
        "x-muse-deprecated-version": "1.24.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlaybackSession-JoinOrCreateSessionBody",
                "type": "object",
                "properties": {
                  "appId": {
                    "type": "string",
                    "maxLength": 127,
                    "description": "Identifies your app. This should be a reverse DNS name of the form “com.companyname.appname” or similar. It is used together with appContext to determine if a session can be joined or not. As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.The sum total length of appId and appContext must be less than 255 bytes. Otherwise, the player will return an error.",
                    "x-muse-since-version": "1.0.0",
                    "deprecated": true,
                    "x-muse-deprecated-version": "1.24.0"
                  },
                  "appContext": {
                    "type": "string",
                    "maxLength": 127,
                    "description": "Instance data for your app, an opaque string that you can use to identify a particular user account, for example. It is used together with appId to determine if a session can be joined or not. As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.\n\n The sum total length of appId and appContext must be less than 255 bytes. Otherwise, the player will return an error.",
                    "x-muse-since-version": "1.0.0",
                    "deprecated": true,
                    "x-muse-deprecated-version": "1.24.0"
                  },
                  "accountId": {
                    "type": "string",
                    "maxLength": 13,
                    "description": "(Optional) The music service account to use on Sonos for playback in the session. See the MusicObjectId for more details about this parameter. If your app submits an invalid accountId, you will receive an ERROR_INVALID_PARAMETER error. An accountId is invalid when it doesn’t match a stored account on the player.",
                    "x-muse-since-version": "1.0.0",
                    "deprecated": true,
                    "x-muse-deprecated-version": "1.24.0"
                  },
                  "customData": {
                    "type": "string",
                    "maxLength": 1023,
                    "description": "(Optional) A blob of text stored by the player and passed back to any other clients that successfully join an existing session. This data (up to 1023 bytes) is stored within the session. The player truncates blobs of text that are longer than 1023 bytes and returns the truncated string in the command response. The default value is “”. As a best practice, user-identifiable data should be hashed or encoded so that it is only useful to your app.",
                    "x-muse-since-version": "1.0.0",
                    "deprecated": true,
                    "x-muse-deprecated-version": "1.24.0"
                  }
                },
                "required": [
                  "appId",
                  "appContext"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/sessions/{sessionId}/playbackSession": {
      "delete": {
        "operationId": "PlaybackSession-LeaveSession",
        "description": "Warning: This command, along with all other playbackSession commands used to join or leave sessions over a persistent connections with the player, has been deprecated. The client must still create a session with the createSession command, and the generated sessionId should be cached and used with subsequent commands.\n\n Leaves (disconnects from) the given playback session. The player is responsible for tracking the number of clients connected to the session. When the number of connected clients transitions from 1 to 0 due to an explicit leaveSession command, then the player stops playback and delivers sessionError(ERROR_SESSION_EVICTED) to any clients still subscribed to the session ID. In all other cases, including when the number of connected clients reaches 0 due to an implicit disconnect, then the player maintains playback and keeps the session alive until such time as the music service ends authorization for the stream.\n\n Generally, a client should call leaveSession only in response to an explicit user action to stop controlling to the Sonos group. Changing the queue does not require a new session. Simply call loadCloudQueue with new parameters.\n \n NOTE: Leaving the session does not implicitly unsubscribe a client from receiving playbackSession events. A subscribed client will continue to receive events related to the session until explicitly calling unsubscribe. \n This command is only available on the LAN.",
        "summary": "leaveSession",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "deprecated": true,
        "x-muse-deprecated-version": "1.24.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/sessions/{sessionId}/playbackSession/loadCloudQueue": {
      "post": {
        "operationId": "PlaybackSession-LoadCloudQueue",
        "description": "One way to play audio on Sonos is by using a cloud queue, a list of tracks that you host on a server that the player can access. See Play audio for details. Use the loadCloudQueue command in the playbackSession namespace to load, and optionally start playback of, an item in a cloud queue.\n\n This command requires that your app has an open playback session with a cloud queue, created or joined using the createSession, joinSession, or joinOrCreateSession command.\n\n If you want to immediately start playing the track, set the playOnCompletion parameter to true. This bypasses the need to send a play command after the player loads the track. You should also send playback objects with information about the track in the trackMetadata parameter. This optimization improves the user experience by starting playback for the first track before the player fetches tracks from the cloud queue server.\n\n After receiving the loadCloudQueue command, the player will fetch a window of tracks from the cloud queue server centered around the item with the itemId that your app provided. If the track was deleted, the group will play the next track in the queue. For more details, see the Cloud Queue API /itemWindow endpoint.\n\n All commands in the playback and playbackMetadata namespace also apply to the cloud queue playback. For example, you can send the play or pause command in the playback namespace to play or pause a cloud queue track on a player.",
        "summary": "loadCloudQueue",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlaybackSession-LoadCloudQueueBody",
                "type": "object",
                "properties": {
                  "queueBaseUrl": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "The base URL for the cloud queue. The player uses this to form the REST URLs used to access the cloud queue. This URL is required to end in a recognized version specification indicating the version of the Cloud Queue API supported by the server. See the Cloud queue base URL and API version section in Play audio for details.\n\n You can pass RESTful segments within the base URL to identify the user. See the Communicate user identity in the base URL section in Play audio for details.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "httpAuthorization": {
                    "type": "string",
                    "maxLength": 5120,
                    "description": "(Optional) The string value for the HTTP Authorization header, provided to the cloud queue server on all requests. See the Authorization for media and the cloud queue section in Play audio for details. If you don’t include this value and the player matches the session to a SMAPI user account, the Authorization header will contain the SMAPI account OAuth token.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "useHttpAuthorizationForMedia": {
                    "type": "boolean",
                    "description": "(Optional) If true, the player passes the httpAuthorization token to HTTPS media requests associated with the cloud queue. The player never sends the token to insecure (HTTP) requests. This parameter has no bearing when cloud queue items reference SMAPI objects, in which case, the player sends normal SMAPI headers. The default value is false.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "itemId": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "(Optional) The identifier for the track to load. If this is an empty string (“”) or omitted, the player skips to the beginning of the cloud queue by requesting an item window with an empty string as the itemId. If you provide trackMetadata, you must also provide itemId, even if it is “”.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "queueVersion": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "(Optional) An opaque identifier used to indicate the change state of the contents in the cloud queue. For example, if the list of tracks in the cloud queue changes, the cloud queue server would change the queueVersion. The player stores this value and can pass it back in the GET /itemWindow request. This enables your cloud-based client to keep its app and data model in sync across calls to the player.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "positionMillis": {
                    "type": "integer",
                    "format": "int32",
                    "description": "(Optional) Position within the track in milliseconds. Default value is 0. If not provided and itemId matches the current item, the player does not interrupt playback or change the current position. The player still respects the playOnCompletion parameter, if provided. This value can be formatted as a JSON string or number.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "playOnCompletion": {
                    "type": "boolean",
                    "description": "(Optional) If true, start playback after loading the cloud queue. If you provided the trackMetadata, the player begins playback immediately. If you provided the itemId, the player starts playing once the cloud queue window returns the metadata.\n\n If not provided, the default value is false. If false, the player loads the cloud queue, but requires the play command to begin.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "trackMetadata": {
                    "$ref": "#/components/schemas/track",
                    "description": "(Optional) The metadata for the first track. If provided, the player starts playing the item immediately, with the default playback policies, before the player retrieves the item window. See the track playback object type for the data structure of this object.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "queueBaseUrl"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/sessions/{sessionId}/playbackSession/loadStreamUrl": {
      "post": {
        "operationId": "PlaybackSession-LoadStreamUrl",
        "description": "The loadStreamUrl command in the playbackSession namespace loads a streaming (live) radio station URL and optionally starts playback. Upon successful completion, the player sends a playbackStatus event to your app or hardware integration. Your app should subscribe to the playback namespace before sending the loadStreamUrl command to avoid race conditions in receiving playbackStatus or playbackError events.\n\n This command requires that your app has an open playback session with a cloud queue, created or joined using the createSession, joinSession, or joinOrCreateSession command.\n\n If you want to immediately start playing the stream, set the playOnCompletion parameter to true. This bypasses the need to send a play command after the player loads the stream.",
        "summary": "loadStreamUrl",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlaybackSession-LoadStreamUrlBody",
                "type": "object",
                "properties": {
                  "streamUrl": {
                    "type": "string",
                    "maxLength": 1024,
                    "description": "HTTP URL for the radio station stream. See the supported content types below. Note that you cannot use this command to send an on-demand track for playback.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "playOnCompletion": {
                    "type": "boolean",
                    "description": "(Optional) If true, the player will start playback after loading the stream URL. If false or not provided, the player remains in the PLAYBACK_IDLE state.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "stationMetadata": {
                    "$ref": "#/components/schemas/container",
                    "description": "(Optional) Metadata about the radio station. See below for details.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "itemId": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "(Optional) If provided, the player includes this itemId in subsequent playbackStatus and playbackError events corresponding to this stream.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "streamUrl"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/sessions/{sessionId}/playbackSession/refreshCloudQueue": {
      "post": {
        "operationId": "PlaybackSession-RefreshCloudQueue",
        "description": "Use the refreshCloudQueue command in the playbackSession namespace to signal the player to re-fetch tracks from the cloud queue server centered around the current item. See the Cloud Queue API /itemWindow endpoint for details.\n\n This command requires your app to have either created a new session or joined an existing session, and also loaded a cloud queue on the group with loadCloudQueue.\n\n Your app should only use this command when it detects a change in the cloud queue content that should immediately be reflected in the group. For example, if a user removes the currently playing track with your app, use this command to remove the track from the group and stop it from playing. This helps provide a good user experience.",
        "summary": "refreshCloudQueue",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_DISALLOWED_BY_POLICY",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_SKIP_LIMIT_REACHED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/sessions/{sessionId}/playbackSession/rejoin": {
      "post": {
        "operationId": "PlaybackSession-RejoinSession",
        "description": "Warning: This command, along with all other playbackSession commands used to join or leave sessions over a persistent connections with the player, has been deprecated. The client must still create a session with the createSession command, and the generated sessionId should be cached and used with subsequent commands.\n\n Rejoins an existing session. This command joins the current session if the session ID matches the current session ID.\n\n NOTE: This command can only be called by Lechmere to support managing sessions for cloud-based clients when groups move on the LAN.",
        "summary": "rejoinSession",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_SESSION_JOIN_FAILED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/sessionError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "deprecated": true,
        "x-muse-deprecated-version": "1.24.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/sessions/{sessionId}/playbackSession/skipToItem": {
      "post": {
        "operationId": "PlaybackSession-SkipToItem",
        "description": "Use the skipToItem command in the playbackSession namespace to skip to the track with the specified itemId in a cloud queue and optionally seek and initiate playback. This command requires your app to have either created a new session or joined an existing session, and also loaded a cloud queue on the group with loadCloudQueue.\n\n Use playOnCompletion to start playing the cloud queue item being loaded, so your app doesn’t have to send an extra play command.\n\n Most of the times your app already has access to the track metadata of the cloud queue item that is being loaded. Use the optional trackMetadata parameter to provide that information so the group can start playing the track immediately after receiving the loadCloudQueue command. This optimization improves the user experience by starting playback before the player fetches tracks from the cloud queue server.",
        "summary": "skipToItem",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_DISALLOWED_BY_POLICY",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI",
              "ERROR_SKIP_LIMIT_REACHED"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/playbackError"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlaybackSession-SkipToItemBody",
                "type": "object",
                "properties": {
                  "itemId": {
                    "type": "string",
                    "maxLength": 128,
                    "description": "The identifier for the track. This is required, but does not need to be a value. If it is an empty string, the group will skip to the beginning of the queue.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "queueVersion": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "(Optional) An opaque identifier used to indicate the change state of the contents in the cloud queue. For example, if the list of tracks in the cloud queue change, the cloud queue server would change the queueVersion. The player stores this value and can pass it back in the GET /itemWindow request.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "positionMillis": {
                    "type": "integer",
                    "format": "int32",
                    "description": "(Optional) Position within track in milliseconds. If you omit this parameter and send a different itemId than the one that is currently playing, the player assumes that the positionMillis is zero. If you omit this parameter and send the itemId that is currently playing, the player does not change the position, and continues playing.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "playOnCompletion": {
                    "type": "boolean",
                    "description": "(Optional) Start playback after loading.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "trackMetadata": {
                    "$ref": "#/components/schemas/track",
                    "description": "(Optional) The target track to play. Entering this value enables the player to load and start playing the track immediately. See the track playback object for the data structure of this object.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "itemId"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/sessions/{sessionId}/playbackSession/subscription": {
      "post": {
        "operationId": "PlaybackSession-Subscribe",
        "description": "Use this command to subscribe to events in the playbackSession namespace for a specific sessionId. Your app can only be subscribed to one session at a time.\n\n Returns an empty body with a success value of true if successful.",
        "summary": "subscribe",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else.",
      "delete": {
        "operationId": "PlaybackSession-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the playbackSession namespace.\n\n Returns an empty body with a success value of true if successful.",
        "summary": "unsubscribe",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/sessions/{sessionId}/playbackSession/suspend": {
      "post": {
        "operationId": "PlaybackSession-Suspend",
        "description": "Use the suspend command in the playbackSession namespace to suspend a specified session. The player will clear the stored item window of tracks and send a playbackStatus event to tell clients that the current item is null.\n\n As described in a cloud queue use case in Play audio, if your app sends a play command when the cloud queue is empty, the player will attempt to resume playback of content that was playing prior to this command. For example, if the user was previously listening to a radio station or had a playlist queued, it will attempt to resume playback of that content.\n\n When a session is suspended, the player won’t revert to the previous music source in this case. Instead, the player delivers a sessionInfo event with a suspended value of true for the suspended session. The session stays suspended until one of the following occurs:\n\n The player receives a play command. If the player receives a play command, it sends a sessionInfo event with a suspended value of false.\n The player receives either a loadCloudQueue or skipToItem command for the suspended session. The player follows these commands as specified.\n The player receives a createSession command. The suspended session receives an ERROR_SESSION_EVICTED sessionError.\n The user or an action picks a new music source. This can either be from the Sonos app or through the loadFavorite command. The suspended session receives an ERROR_SESSION_EVICTED sessionError.",
        "summary": "suspend",
        "tags": [
          "playbackSession"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/groupCoordinatorChanged"
                    },
                    {
                      "$ref": "#/components/schemas/globalError"
                    }
                  ],
                  "discriminator": {
                    "propertyName": "x-sonos-type"
                  }
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlaybackSession-SuspendBody",
                "type": "object",
                "properties": {
                  "queueVersion": {
                    "type": "string",
                    "maxLength": 64,
                    "description": "(Optional) The player will store this value locally. The cloud queue server should return this queue version in all GET /version and GET /itemWindow responses while the player is suspended.",
                    "x-muse-since-version": "1.0.0"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "sessionId",
          "description": "Target sessionId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "Sessions let one or more apps load and control playback of a cloud queue.\n\n The playbackSession namespace includes commands and events that enable apps to create a new session, or join an existing session in a group. Once your app has joined a session, it can load and start playback of an item in a cloud queue. Your app can also skip or seek to a specific item in a cloud queue, ask the group to re-fetch items in the cloud queue, or disconnect from the session. Your app can also get notified with a session error that your session was evicted or terminated at any time, for example, when another app starts playing something else."
    },
    "/players/{playerId}/playerVolume": {
      "post": {
        "operationId": "PlayerVolume-SetVolume",
        "description": "Use the setVolume command in the playerVolume namespace to set player volume and mute state.\n\n Returns an empty body with a success value of true if successful. The player generates a playerVolume event if the volume was changed.\n Additionally, if setVolume is called on a player that has a fixed player volume state that is true, the command will fail and you will receive an ERROR_COMMAND_FAILED globalError. This is because players with fixed volumes cannot be changed, for example, a CONNECT with fixed line out would respond with this error if your app tried to set the volume on it.",
        "summary": "setVolume",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlayerVolume-SetVolumeBody",
                "type": "object",
                "properties": {
                  "volume": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 100,
                    "exclusiveMaximum": false,
                    "minimum": 0,
                    "exclusiveMinimum": false,
                    "description": "(Optional) Between 0 and 100. If your app submits a number outside of this range, you will receive an ERROR_INVALID_PARAMETER error.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "(Optional) true to mute the player or false to unmute the player.",
                    "x-muse-since-version": "1.0.0"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace includes commands and events that enable your app to control and update player volume and player mute state.",
      "get": {
        "operationId": "PlayerVolume-GetVolume",
        "description": "Use the getVolume command in the playerVolume namespace to get the volume and mute state of a player.",
        "summary": "getVolume",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "Returns a playerVolume object type with the current volume, mute state, and fixed status of the targeted player.",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playerVolume"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/players/{playerId}/playerVolume/duck": {
      "post": {
        "operationId": "PlayerVolume-Duck",
        "description": "Ducking temporarily lowers the zone's volume without affecting the observed system volume. Sending another \"duck\" command to a system that is already ducking does not affect the output level. However, it does reset the duration.",
        "summary": "duck",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlayerVolume-DuckBody",
                "type": "object",
                "properties": {
                  "durationMillis": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 60000,
                    "exclusiveMaximum": false,
                    "minimum": 0,
                    "exclusiveMinimum": false,
                    "description": "Ducking lasts for the specified time, unless explicitly ended with the \"unduck\" command. The default value is 3 seconds when this value is omitted. The minimum value is 0 seconds. The maximum value is 60 seconds. Values outside the valid range are clamped.",
                    "x-muse-since-version": "1.0.0"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace includes commands and events that enable your app to control and update player volume and player mute state."
    },
    "/players/{playerId}/playerVolume/mute": {
      "post": {
        "operationId": "PlayerVolume-SetMute",
        "description": "Use the setMute command in the playerVolume namespace to mute and unmute a player.\n\n Returns an empty body with a success value of true if successful. The player generates a playerVolume event if the mute state was changed.",
        "summary": "setMute",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlayerVolume-SetMuteBody",
                "type": "object",
                "properties": {
                  "muted": {
                    "type": "boolean",
                    "description": "true to mute the player or false to unmute the player.",
                    "x-muse-since-version": "1.0.0"
                  }
                },
                "required": [
                  "muted"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace includes commands and events that enable your app to control and update player volume and player mute state."
    },
    "/players/{playerId}/playerVolume/relative": {
      "post": {
        "operationId": "PlayerVolume-SetRelativeVolume",
        "description": "Use the setRelativeVolume command in the playerVolume namespace to increase or decrease volume for a player and unmute the player if muted.\n\n Returns an empty body with a success value of true if successful. The player generates a playerVolume event if the volume was changed.",
        "summary": "setRelativeVolume",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "PlayerVolume-SetRelativeVolumeBody",
                "type": "object",
                "properties": {
                  "volumeDelta": {
                    "type": "integer",
                    "format": "int32",
                    "maximum": 100,
                    "exclusiveMaximum": false,
                    "minimum": -100,
                    "exclusiveMinimum": false,
                    "description": "(Optional) Between -100 and 100 to indicate the amount to increase or decrease the volume for the player. If your app submits a number outside of this range, you will receive an ERROR_INVALID_PARAMETER error. The player adds this value to the current volume and keeps the result in the range of 0 to 100.",
                    "x-muse-since-version": "1.0.0"
                  },
                  "muted": {
                    "type": "boolean",
                    "description": "(Optional) true to mute the player or false to unmute the player.",
                    "x-muse-since-version": "1.0.0"
                  }
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace includes commands and events that enable your app to control and update player volume and player mute state."
    },
    "/players/{playerId}/playerVolume/subscription": {
      "post": {
        "operationId": "PlayerVolume-Subscribe",
        "description": "Use this command to subscribe to events in the playerVolume namespace.\n\n Returns an empty body with a success value of true if successful and sends a playerVolume event only for the subscriber.",
        "summary": "subscribe",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace includes commands and events that enable your app to control and update player volume and player mute state.",
      "delete": {
        "operationId": "PlayerVolume-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the playerVolume namespace.",
        "summary": "unsubscribe",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.0.0"
      }
    },
    "/players/{playerId}/playerVolume/unduck": {
      "post": {
        "operationId": "PlayerVolume-Unduck",
        "description": "This command is the dual of duck. The volume is restored if there is a ducking operation in progress. Otherwise, the system accepts this command and does not change any internal state.",
        "summary": "unduck",
        "tags": [
          "playerVolume"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "write"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "playerId",
          "description": "Target playerId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.0.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.0.0"
        }
      ],
      "description": "This namespace includes commands and events that enable your app to control and update player volume and player mute state."
    },
    "/groups/{groupId}/playlists": {
      "post": {
        "operationId": "Playlists-LoadPlaylist",
        "description": "The loadPlaylist command activates a playlist within the default playback session. This command interrupts any active private playback sessions. Sonos adds tracks from the playlist to the queue and activates the queue. This prevents your app from overwriting user-curated queues.",
        "summary": "loadPlaylist",
        "tags": [
          "playlists"
        ],
        "responses": {
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "load"
        ],
        "x-muse-since-version": "1.8.0",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "title": "Playlists-LoadPlaylistBody",
                "type": "object",
                "properties": {
                  "playlistId": {
                    "type": "string",
                    "maxLength": 36,
                    "description": "The identifier of the playlist. You can find this in the playlistsList object in the getPlaylists response.",
                    "x-muse-since-version": "1.8.0"
                  },
                  "action": {
                    "$ref": "#/components/schemas/queueAction",
                    "description": "(Optional) Controls how the the player inserts the playlist into the shared queue, such as APPEND, INSERT, INSERT_NEXT, or REPLACE. If omitted, defaults to append.",
                    "x-muse-since-version": "1.8.0"
                  },
                  "playModes": {
                    "$ref": "#/components/schemas/playMode",
                    "description": "(Optional) Defines the functionality of one or more play modes. You can set these to customize shuffle, repeat, repeat-one and crossfade.",
                    "x-muse-since-version": "1.8.0"
                  },
                  "playOnCompletion": {
                    "type": "boolean",
                    "description": "(Optional) If true, the player automatically starts playback. If false or not provided, the player remains in the PLAYBACK_IDLE state.",
                    "x-muse-since-version": "1.8.0"
                  }
                },
                "required": [
                  "playlistId"
                ]
              }
            }
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "groupId",
          "description": "Target groupId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.8.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.8.0"
        }
      ],
      "description": "The playlists namespace enables your app or hardware integration to enumerate the list of Sonos playlists in a household and load one to start playback.\n\n Listeners create Sonos playlists in the Sonos app. Sonos playlists can include tracks or playlists from multiple content services. The Sonos app displays playlists in a swimlane in My Sonos. It also adds favorited playlists to this swimlane.\n\n Note: As a best practice, use the favorites and playlists namespaces together if you use them. The Sonos app combines the results of these two namespaces in different swimlanes. If you don’t use these together, users may think some of their content is missing in your integration."
    },
    "/households/{householdId}/playlists": {
      "get": {
        "operationId": "Playlists-GetPlaylists",
        "description": "Use the getPlaylists command to get the list of Sonos playlists for a household. Playlists do not include pinned items (any non-playable containers pinned to My Sonos) or Sonos favorites. See the Save your favorites section in the Sonos user guide for details about My Sonos.\n\n Returns a playlistsList object, which is an array of playlist objects with a version number.",
        "summary": "getPlaylists",
        "tags": [
          "playlists"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistsList"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.8.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.8.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.8.0"
        }
      ],
      "description": "The playlists namespace enables your app or hardware integration to enumerate the list of Sonos playlists in a household and load one to start playback.\n\n Listeners create Sonos playlists in the Sonos app. Sonos playlists can include tracks or playlists from multiple content services. The Sonos app displays playlists in a swimlane in My Sonos. It also adds favorited playlists to this swimlane.\n\n Note: As a best practice, use the favorites and playlists namespaces together if you use them. The Sonos app combines the results of these two namespaces in different swimlanes. If you don’t use these together, users may think some of their content is missing in your integration."
    },
    "/households/{householdId}/playlists/subscription": {
      "post": {
        "operationId": "Playlists-Subscribe",
        "description": "Use this command to subscribe to events in the playlists namespace.\n\n When subscribed, Sonos sends asynchronous versionChanged events when users update their Sonos playlists. Your app can then choose to fetch the playlists as needed whenever the version changes. This is because the playlistsList object can be large for asynchronous events.",
        "summary": "subscribe",
        "tags": [
          "playlists"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.8.0"
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.8.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.8.0"
        }
      ],
      "description": "The playlists namespace enables your app or hardware integration to enumerate the list of Sonos playlists in a household and load one to start playback.\n\n Listeners create Sonos playlists in the Sonos app. Sonos playlists can include tracks or playlists from multiple content services. The Sonos app displays playlists in a swimlane in My Sonos. It also adds favorited playlists to this swimlane.\n\n Note: As a best practice, use the favorites and playlists namespaces together if you use them. The Sonos app combines the results of these two namespaces in different swimlanes. If you don’t use these together, users may think some of their content is missing in your integration.",
      "delete": {
        "operationId": "Playlists-Unsubscribe",
        "description": "Use this command to unsubscribe to events in the playlists namespace.",
        "summary": "unsubscribe",
        "tags": [
          "playlists"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ok"
                }
              }
            }
          },
          "400": {
            "description": "The given resource/object identifier is invalid",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ]
          },
          "403": {
            "description": "A client does not have the correct permissions to perfom a command",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ]
          },
          "404": {
            "description": "A command was targeted to a group that no longer is the same group",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ]
          },
          "499": {
            "description": "Indicates there was an error occurred when performing a command",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ]
          },
          "500": {
            "description": "Sonos has experience an unexpected condition it is unable to recover from",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ]
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.8.0"
      }
    },
    "/households/{householdId}/playlists/{playlistId}": {
      "get": {
        "operationId": "Playlists-GetPlaylist",
        "description": "The getPlaylist command retrieves the track information associated with a particular playlist.\n\n This command returns a PlaylistSummary object, which contains an array of PlaylistTrack objects.",
        "summary": "getPlaylist",
        "tags": [
          "playlists"
        ],
        "responses": {
          "200": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "OK"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/playlistSummary"
                }
              }
            }
          },
          "400": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INVALID_OBJECT_ID",
              "ERROR_INVALID_SYNTAX",
              "ERROR_MISSING_PARAMETERS"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "403": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_NO_PERMISSION"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "404": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_GROUP_CHANGED",
              "ERROR_UNSUPPORTED_NAMESPACE",
              "ERROR_CMD_FUTURE"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "499": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_COMMAND_FAILED",
              "ERROR_QUEUE_FULL",
              "ERROR_NYI"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          },
          "500": {
            "description": "See the x-muse-error-codes extension for a list of muse errors that generate this response",
            "x-muse-error-codes": [
              "ERROR_INTERNAL"
            ],
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/globalError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "playback-control-all"
            ],
            "OAuth2": [
              "playback-control-all"
            ]
          }
        ],
        "x-muse-permissions": [
          "read"
        ],
        "x-muse-since-version": "1.18.1"
      },
      "parameters": [
        {
          "in": "path",
          "name": "householdId",
          "description": "Target householdId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.8.0"
        },
        {
          "in": "header",
          "name": "X-Sonos-Corr-Id",
          "description": "Correlation UUID for data tracking purposes",
          "required": false,
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "x-muse-since-version": "1.8.0"
        },
        {
          "in": "path",
          "name": "playlistId",
          "description": "Target playlistId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "x-muse-since-version": "1.8.0"
        }
      ],
      "description": "The playlists namespace enables your app or hardware integration to enumerate the list of Sonos playlists in a household and load one to start playback.\n\n Listeners create Sonos playlists in the Sonos app. Sonos playlists can include tracks or playlists from multiple content services. The Sonos app displays playlists in a swimlane in My Sonos. It also adds favorited playlists to this swimlane.\n\n Note: As a best practice, use the favorites and playlists namespaces together if you use them. The Sonos app combines the results of these two namespaces in different swimlanes. If you don’t use these together, users may think some of their content is missing in your integration."
    }
  },
  "components": {
    "schemas": {
      "accountError": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/error",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "reason": {
            "type": "string",
            "maxLength": 256,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "accountId": {
            "type": "string",
            "maxLength": 36,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "errorCode"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "album": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 127,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "artist": {
            "$ref": "#/components/schemas/artist",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "id": {
            "$ref": "#/components/schemas/universalMusicObjectId",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagsData",
              "description": "Deprecated in favor of the `explicit` parameter."
            },
            "maxItems": 3,
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          }
        },
        "required": [
          "name"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "artist": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 127,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "id": {
            "$ref": "#/components/schemas/universalMusicObjectId",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagsData",
              "description": "Deprecated in favor of the `explicit` parameter."
            },
            "maxItems": 3,
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          }
        },
        "required": [
          "name"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "audioClip": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "Describes on audio clip queued for playback on a Sonos player.",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "description": "The unique identifier for the audio clip.",
            "x-muse-since-version": "1.10.0"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "User identifiable string.",
            "x-muse-since-version": "1.10.0"
          },
          "appId": {
            "type": "string",
            "maxLength": 127,
            "description": "This string identifies the app that created the audioClip. Companies should use their reversed Internet domain name as the identifier, similar to com.acme.app.",
            "x-muse-since-version": "1.10.0"
          },
          "priority": {
            "$ref": "#/components/schemas/priority",
            "description": "(Optional) Clip priority. Clips are low priority by default.",
            "x-muse-since-version": "1.10.0"
          },
          "clipType": {
            "$ref": "#/components/schemas/audioClipType",
            "description": "(Optional) Sonos plays a built-in sound when this option is provided. The default value is CHIME.",
            "x-muse-since-version": "1.10.0"
          },
          "status": {
            "$ref": "#/components/schemas/audioClipState",
            "description": "This field indicates the state of the audio clip, for example, if it’s active, it’s currently playing. Audio clips transition from pending (on load) to active to done. Sonos returns the state only in events. See the table below for the available states and values.",
            "x-muse-since-version": "1.10.0"
          },
          "errorCode": {
            "$ref": "#/components/schemas/error",
            "description": "(Optional) Custom error code for audio clips. See the table below for details.",
            "x-muse-since-version": "1.10.0"
          }
        },
        "required": [
          "id",
          "name",
          "appId",
          "priority",
          "status"
        ],
        "x-muse-since-version": "1.10.0"
      },
      "audioClipState": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "This enumeration identifies the current status of an audio clip.",
        "enum": [
          "ACTIVE",
          "DONE",
          "DISMISSED",
          "INACTIVE",
          "INTERRUPTED",
          "ERROR"
        ],
        "x-muse-since-version": "1.10.0"
      },
      "audioClipStatus": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "Sonos players event an audioClipStatus type in the audioClip namespace whenever it schedules, executes, or dismisses a clip. Subscribers to this namespace receive events for all audio clips, not just those loaded by the subscriber.",
        "properties": {
          "audioClips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/audioClip",
              "description": "An array of all audio clips. See audioClip for details."
            },
            "maxItems": 3,
            "x-muse-since-version": "1.10.0"
          }
        },
        "x-muse-since-version": "1.10.0"
      },
      "audioClipType": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "This enumeration identifies the sounds that are built into the Sonos firmware. Partners are free to use these sounds with the loadAudioClip command instead of providing custom files.",
        "enum": [
          "CHIME",
          "CUSTOM",
          "VOICE_ASSISTANT"
        ],
        "x-muse-since-version": "1.10.0"
      },
      "book": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 76,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "chapterCount": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "author": {
            "$ref": "#/components/schemas/artist",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "narrator": {
            "$ref": "#/components/schemas/artist",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "id": {
            "$ref": "#/components/schemas/universalMusicObjectId",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "name"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "capability": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "No description available",
        "enum": [
          "PLAYBACK",
          "CLOUD",
          "HT_PLAYBACK",
          "HT_POWER_STATE",
          "AIRPLAY",
          "LINE_IN",
          "AUDIO_CLIP",
          "VOICE",
          "SPEAKER_DETECTION",
          "FIXED_VOLUME",
          "ROOM_DETECTION"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "container": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "type": {
            "type": "string",
            "maxLength": 48,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "id": {
            "$ref": "#/components/schemas/universalMusicObjectId",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "service": {
            "$ref": "#/components/schemas/service",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "book": {
            "$ref": "#/components/schemas/book",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "podcast": {
            "$ref": "#/components/schemas/podcast",
            "description": "No description available",
            "x-muse-since-version": "1.11.0"
          },
          "imageUrl": {
            "type": "string",
            "maxLength": 1024,
            "description": "Replaced by the `images` parameter.",
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagsData",
              "description": "Deprecated in favor of the `explicit` parameter."
            },
            "maxItems": 3,
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "context": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "This is used in the cloud queue API, but not part of the control API. This is the\n object that the cloud queue server returns to the player from the GET /context\n endpoint.",
        "properties": {
          "queueVersion": {
            "type": "string",
            "maxLength": 64,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "contextVersion": {
            "type": "string",
            "maxLength": 64,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "container": {
            "$ref": "#/components/schemas/container",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "reports": {
            "$ref": "#/components/schemas/reportOptions",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "playbackPolicies": {
            "$ref": "#/components/schemas/playbackPolicy",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "error": {
        "x-muse-object-type": "error",
        "type": "object",
        "description": "No description available",
        "properties": {
          "code": {
            "type": "string",
            "description": "No description available"
          }
        }
      },
      "favorite": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "Describes a Sonos favorite in the household. You can see favorites in the My Sonos tab in the app. The following are not considered favorites:\n\n Pinned items — any non-playable containers pinned to My Sonos\n Sonos playlists\n\n See the Save your favorites section in the Sonos user guide and Add favorites for details.",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "description": "An identifier for the favorite.",
            "x-muse-since-version": "1.0.0"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "A user-identifiable name.",
            "x-muse-since-version": "1.0.0"
          },
          "description": {
            "type": "string",
            "maxLength": 256,
            "description": "(Optional) Provides more context to the user.",
            "x-muse-since-version": "1.0.0"
          },
          "imageUrl": {
            "type": "string",
            "maxLength": 256,
            "description": "Replaced by the `images` parameter.",
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          },
          "service": {
            "$ref": "#/components/schemas/service",
            "description": "(Optional) Identifies the content provider.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "favoritesList": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "version": {
            "type": "string",
            "maxLength": 36,
            "description": "This is the same version string used in the ETag Response Header.",
            "x-muse-since-version": "1.0.0"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/favorite",
              "description": "This is a homogeneous container of Favorite objects."
            },
            "maxItems": 70,
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "globalError": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "Players use the globalError object type for command responses that include generic errors that apply to commands in all namespaces in the Control API. Players send an errorCode and reason in the body, as well as a success value of false in the response header. \n\n\t\tThe reason values are readable strings that describe syntax and parameter errors. These strings are not intended for end-user display or for use programmatically.",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/error",
            "description": "The particular error that occurred.",
            "x-muse-since-version": "1.0.0"
          },
          "reason": {
            "type": "string",
            "maxLength": 256,
            "description": "(Optional) A message, if present, indicating more information about the error, to aid in diagnosing problems. Reason strings are not meant for end-user display but are useful in development or error logs.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "errorCode"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "group": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 35,
            "description": "The ID of the group.",
            "x-muse-since-version": "1.0.0"
          },
          "name": {
            "type": "string",
            "maxLength": 69,
            "description": "The display name for the group, such as “Living Room” or “Kitchen + 2”.",
            "x-muse-since-version": "1.0.0"
          },
          "coordinatorId": {
            "type": "string",
            "maxLength": 24,
            "description": "The ID of the player acting as the group coordinator for the group. This is a playerId value.",
            "x-muse-since-version": "1.0.0"
          },
          "playbackState": {
            "$ref": "#/components/schemas/playbackState",
            "description": "The playback state corresponding to the group. This is only sent back in the getGroups response \n as we otherwise you would receive a new groups event every time the playback state changed, \n which could be a lot of events!",
            "x-muse-since-version": "1.0.0"
          },
          "playerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The IDs of the primary players in the group. For example, only one player from each set of \n players bonded as a stereo pair or as satellites to a home theater setup. Each element is the \n ID of a player. This list includes the coordinatorId."
            },
            "maxItems": 32,
            "x-muse-since-version": "1.0.0"
          },
          "areaIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of source areaIds associated with the group."
            },
            "maxItems": 33,
            "x-muse-since-version": "1.14.0"
          }
        },
        "required": [
          "id",
          "name",
          "coordinatorId",
          "playerIds"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "groupCoordinatorChanged": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "No description available",
        "properties": {
          "groupStatus": {
            "$ref": "#/components/schemas/groupStatusCodes",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "groupName": {
            "type": "string",
            "maxLength": 64,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "websocketUrl": {
            "type": "string",
            "maxLength": 66,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "playerId": {
            "type": "string",
            "maxLength": 24,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "groupStatus"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "groupInfo": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "group": {
            "$ref": "#/components/schemas/group",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "groupStatusCodes": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "No description available",
        "enum": [
          "GROUP_STATUS_GONE",
          "GROUP_STATUS_MOVED",
          "GROUP_STATUS_UPDATED"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "groupVolume": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "The groupVolume event in the groupVolume namespace indicates changes to group volume, the group mute state and whether the group volume is fixed or can be changed.\n\n When your app subscribes to the groupVolume namespace and receives this event, it can update its user interface to reflect the latest group volume and group mute state. For example, if a user configures a CONNECT to have a fixed line-out volume, your app will receive a groupVolume event with the fixed parameter value of true. Your app should then disable its volume slider so users know that volume adjustments are not permitted.\n\n Your app can expect to receive one or multiple groupVolume events associated with a single setVolume command. This is because the individual player volume changes become effective at different times, and groupVolume events may or may not be generated for each of the individual player volume changes. Your app is guaranteed to receive a final groupVolume event when all individual player volume changes are stable. See setVolume for more information on how group volume works.\n\n The group mute state is independent of the group volume value, so your app can have a separate mute button and update its state based on the muted parameter in the groupVolume event. The group coordinator also calculates the group mute state by taking into account all the individual player mute states. If all of the players in a group are muted, the muted state for the group is true. If at least one player in a group is not muted then the muted state for the group is false. See setMute for more information on the group mute state.",
        "properties": {
          "volume": {
            "type": "integer",
            "format": "int32",
            "maximum": 100,
            "exclusiveMaximum": false,
            "minimum": 0,
            "exclusiveMinimum": false,
            "description": "Group volume as an integer between 0 and 100, inclusive.",
            "x-muse-since-version": "1.0.0"
          },
          "muted": {
            "type": "boolean",
            "description": "A value indicating whether or not the group is muted. If true, the group is muted. If false, the group is not muted.",
            "x-muse-since-version": "1.0.0"
          },
          "fixed": {
            "type": "boolean",
            "description": "A value indicating whether or not the group volume is fixed or changeable. If true, your app cannot change the group volume. If false, your app can change the group volume.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "volume"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "groups": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "The groups object in the groups namespace describes the current set of logical players and\n groups in the household. Use the getGroups command to get a groups object.",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/group",
              "description": "A list of groups in the household. Each element is a group object."
            },
            "maxItems": 32,
            "x-muse-since-version": "1.0.0"
          },
          "players": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/player",
              "description": "A list of the players in the household. Each element is a player object.\n\n *Note* This array is a filtered variant of the devices array. This array only includes primary\n players. Primary players are capable of independent music playback (PLAYBACK capablity)."
            },
            "maxItems": 32,
            "x-muse-since-version": "1.0.0"
          },
          "partial": {
            "type": "boolean",
            "description": "Describes whether this is a partial output (where players or groups were dropped). Players\n and groups can be dropped from the output if they are determined to be invalid according\n to Sonos household rules. Invalid groups can appear when the household is in a transient state\n during a grouping operation.",
            "x-muse-since-version": "1.18.1"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "household": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "Represents a Sonos household.",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 64,
            "description": "This is the householdId, used in household targeted commands such as `getGroups`.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "id"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "households": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "This object contains a list of households.",
        "properties": {
          "households": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/household",
              "description": "No description available"
            },
            "maxItems": 4,
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "limitedSkipsState": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "skipsRemaining": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "skipLimitReached": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "metadataStatus": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "The metadataStatus event in the playbackMetadata namespace indicates changes to the metadata for the currently playing track and the next track, if available.",
        "properties": {
          "container": {
            "$ref": "#/components/schemas/container",
            "description": "A container object indicating the current playback source. The container describes and identifies what is currently playing, for example, the programmed radio station, music service playlist, or linein source. If no content is loaded, the container field will not be present.",
            "x-muse-since-version": "1.0.0"
          },
          "currentItem": {
            "$ref": "#/components/schemas/queueItem",
            "description": "A playback object for the current item. See the item playback object for the data structure of this object.",
            "x-muse-since-version": "1.0.0"
          },
          "nextItem": {
            "$ref": "#/components/schemas/queueItem",
            "description": "A playback object for the item that will play after the currently playing track finishes. See the item playback object for the data structure of this object. Only included if there is a next track.",
            "x-muse-since-version": "1.0.0"
          },
          "currentShow": {
            "$ref": "#/components/schemas/radioShow",
            "description": "(Optional) bInformation about the current \"show\", when available. Generally only present for radio stations (container.type = \"station\").",
            "x-muse-since-version": "1.0.0"
          },
          "streamInfo": {
            "type": "string",
            "maxLength": 256,
            "description": "(Optional) An unstructured text string describing what is currently playing. Typically only available for stations that do not have currentItem information.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "musicServiceAccount": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "Describes the music service account.",
        "properties": {
          "userIdHashCode": {
            "type": "string",
            "maxLength": 256,
            "description": "Opaque hash of the user account sent by your service in the match command.",
            "x-muse-since-version": "1.0.0"
          },
          "nickname": {
            "type": "string",
            "maxLength": 64,
            "description": "The name for the music service account presented to the user when they view their account from the Sonos app.",
            "x-muse-since-version": "1.0.0"
          },
          "id": {
            "type": "string",
            "maxLength": 13,
            "description": "The account ID for the music service account.",
            "x-muse-since-version": "1.0.0"
          },
          "isGuest": {
            "type": "boolean",
            "description": "Indicates whether the account is a guest account or not. If true, the account is a guest account. If false, it is not.",
            "x-muse-since-version": "1.0.0"
          },
          "service": {
            "$ref": "#/components/schemas/service",
            "description": "A service object describing the music service.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "ok": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "This object represents an empty (default) success. The platform returns\n an empty object ({}).",
        "properties": {},
        "x-muse-since-version": "1.0.0"
      },
      "playMode": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "repeat": {
            "type": "boolean",
            "description": "Repeat tracks. When playback reaches the end of the current queue of tracks, playback will wrap around and continue from the beginning of the queue.",
            "x-muse-since-version": "1.0.0"
          },
          "repeatOne": {
            "type": "boolean",
            "description": "Repeat the current track indefinitely until this mode is disabled or your app explicitly changes the playhead position to a different track, for example, by skipping to the next track, a previous track, or a specific track in a cloud queue.",
            "x-muse-since-version": "1.0.0"
          },
          "shuffle": {
            "type": "boolean",
            "description": "Play the tracks in the queue in a randomly shuffled order.",
            "x-muse-since-version": "1.0.0"
          },
          "crossfade": {
            "type": "boolean",
            "description": "Fade out and mix the end of a track with the start of the next track as it is being faded in, creating a crossfade effect.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "playbackAction": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "The player reports available playback actions in the playbackAction object. The player calculates the available playback actions using playback policies set for the content as well as the content type. \n\n\t\tSome of the playback actions correlate to playback polices. But some are related to content type. For example, users cannot skip content on live radio stations. Content partners cannot customize canStop or canPause, so they are not listed on the playback policies page.",
        "properties": {
          "canSkip": {
            "type": "boolean",
            "description": "If true, the user can skip the content. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canSkipBack": {
            "type": "boolean",
            "description": "If true, the user can skip to the previous item. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canSeek": {
            "type": "boolean",
            "description": "If true, the user can seek within the content. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canPause": {
            "type": "boolean",
            "description": "If true, the user can pause the content and resume it later. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canStop": {
            "type": "boolean",
            "description": "If true, the user can stop the content. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canRepeat": {
            "type": "boolean",
            "description": "If true, the user can repeat the content. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canRepeatOne": {
            "type": "boolean",
            "description": "If true, the user can repeat the same content over and over again. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canCrossfade": {
            "type": "boolean",
            "description": "If true, the user can crossfade previous and successive items with the current content if with the crossfade setting. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          },
          "canShuffle": {
            "type": "boolean",
            "description": "If true, the user can shuffle the content. If false, the user cannot.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "playbackError": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "The playbackError event in the playback namespace indicates playback errors on the group, such as a media server timing out, or when there’s no content loaded on the player.\n\n Most playback errors occur when the player requests audio from the media server and the request fails. Your app can use the errorCode to handle specific types of errors, and log the reason string for debugging the error.\n\n If a cloud queue is loaded as the audio source on a group, your app can also receive playbackError events on cloud queue server request errors. Your app will also receive the itemId of the cloud queue track that caused the error. Players communicate in the background with the cloud queue server to retrieve new tracks when needed. See Play audio for more details.",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/error",
            "description": "An error state.",
            "x-muse-since-version": "1.0.0"
          },
          "reason": {
            "type": "string",
            "maxLength": 256,
            "description": "The reason for the error. This string is optional, so it may not always be returned. It is\n in English and not localized. Your app should only use it for debugging purposes.",
            "x-muse-since-version": "1.0.0"
          },
          "itemId": {
            "type": "string",
            "maxLength": 128,
            "description": "The item ID of the current track, if the audio source is a cloud queue.",
            "x-muse-since-version": "1.0.0"
          },
          "host": {
            "type": "string",
            "maxLength": 1024,
            "description": "(Optional) Media server hostname. This is the server where the player got an error fetching the media.",
            "x-muse-since-version": "1.0.0"
          },
          "hostIp": {
            "type": "string",
            "maxLength": 16,
            "description": "(Optional) IP address of the media server.",
            "x-muse-since-version": "1.0.0"
          },
          "httpStatus": {
            "type": "integer",
            "format": "int32",
            "maximum": 600,
            "exclusiveMaximum": true,
            "minimum": 100,
            "exclusiveMinimum": false,
            "description": "If the error was due to a server request, this field should be set to the HTTP status code\n from the server response.",
            "x-muse-since-version": "1.0.0"
          },
          "queueVersion": {
            "type": "string",
            "maxLength": 64,
            "description": "The last cloud queue change state identifier cached by the player. This could have been from:\n\n * the last `[GET /itemWindow](https://developer.sonos.com/reference/cloud-queue-api/get-itemwindow/)` or `[GET /version](https://developer.sonos.com/reference/cloud-queue-api/get-version/)` response.\n * a `loadCloudQueue` or `skipToItem` response.\n\n This is omitted when the value is unknown, for example, if the server did not respond to a query.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "errorCode"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "playbackPolicy": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "canSkip": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canSkipBack": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "limitedSkips": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canSeek": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canSkipToItem": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canRepeat": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canRepeatOne": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canCrossfade": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canShuffle": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "canResume": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "pauseAtEndOfQueue": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "refreshAuthWhilePaused": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "showNNextTracks": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "showNPreviousTracks": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "isVisible": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "notifyUserIntent": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "pauseTtlSec": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "playTtlSec": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "pauseOnDuck": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "playbackState": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "No description available",
        "enum": [
          "PLAYBACK_STATE_IDLE",
          "PLAYBACK_STATE_BUFFERING",
          "PLAYBACK_STATE_PAUSED",
          "PLAYBACK_STATE_PLAYING"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "playbackStatus": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "The playbackStatus type in the playback namespace indicates changes to the group playback state, such as idle, buffering, paused, or playing, and the current playback position in the track. If the audio source is a cloud queue, this event also provides information about the cloud queue source, like the queueVersion and the current item’s itemId. It also can provide playback policies and modes. This object type can be a response to a command or an asynchronous event sent to apps subscribed to the playback namespace.\n\n The initial state of a group after startup is PLAYBACK_STATE_IDLE. When a user starts playing audio on a group, it transitions to PLAYBACK_STATE_BUFFERING and PLAYBACK_STATE_PLAYING, or it may skip the buffering state and go straight to playing. Depending on the audio source, pausing playback may cause the group to go to either PLAYBACK_STATE_PAUSED or PLAYBACK_STATE_IDLE. For example, streaming audio sources, such as Internet radio stations, will be in PLAYBACK_STATE_IDLE when paused. A group can also transition to PLAYBACK_STATE_IDLE after a playback error occurs.\n\n Your app will only be notified of changes to the current track position that result from any user action to seek to a new track position, a new track starting or the last track ending, or a playback error. If a track is playing normally on a group, your app will not receive playbackStatus events while the track position progresses without errors. If your app has a progress bar, you should update it with a local timer when playing normally.\n\n You will receive the item ID and offset position for the current item as well as for the previous item. For example, when a user skips from one track to another, you’ll receive the previousItemId and previousPositionMillis for the previous track, as well as the itemId and positionMillis for the currently playing track. If the user pauses the currently playing track, the previous track and position will be the same as the currently playing track and position. If the user seeks within the same track, the previous track will be the same as the currently playing track, but the position will be different.",
        "properties": {
          "playbackState": {
            "$ref": "#/components/schemas/playbackState",
            "description": "The playback state.",
            "x-muse-since-version": "1.0.0"
          },
          "isDucking": {
            "type": "boolean",
            "description": "A snapshot of the player volume ducking state. When the player is ducked, it lowers the volume of one stream so that another can play over it at a louder volume. A value of true means that the player is currently ducked. A value of false means that the player is not ducked. This attribute does not generate new playbackStatus events.",
            "x-muse-since-version": "1.0.0"
          },
          "queueVersion": {
            "type": "string",
            "maxLength": 64,
            "description": "The last cloud queue change state identifier cached by the player. This could have been from:\n\n * the last GET /itemWindow or GET /version response.\n * a loadCloudQueue or skipToItem response.\n\n This is omitted when the value is unknown, for example, if the server did not respond to a query.",
            "x-muse-since-version": "1.0.0"
          },
          "itemId": {
            "type": "string",
            "maxLength": 128,
            "description": "The item identifier of the current track, if the audio source is a cloud queue.",
            "x-muse-since-version": "1.0.0"
          },
          "positionMillis": {
            "type": "integer",
            "format": "int32",
            "description": "The offset position within the current track in milliseconds.",
            "x-muse-since-version": "1.0.0"
          },
          "previousItemId": {
            "type": "string",
            "maxLength": 128,
            "description": "The ID of the item prior to a playback state change. This indicates what was playing when an action triggered the playbackStatus event.",
            "x-muse-since-version": "1.0.0"
          },
          "previousPositionMillis": {
            "type": "integer",
            "format": "int32",
            "description": "The last position in the previous item.",
            "x-muse-since-version": "1.0.0"
          },
          "playModes": {
            "$ref": "#/components/schemas/playMode",
            "description": "The set of currently effective play modes for the context.",
            "x-muse-since-version": "1.0.0"
          },
          "availablePlaybackActions": {
            "$ref": "#/components/schemas/playbackAction",
            "description": "The set of allowed transport actions as defined by the playback policies calculated by the player.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "playbackState"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "player": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 24,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "name": {
            "type": "string",
            "maxLength": 64,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "websocketUrl": {
            "type": "string",
            "maxLength": 66,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "softwareVersion": {
            "type": "string",
            "maxLength": 48,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "apiVersion": {
            "type": "string",
            "maxLength": 64,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "minApiVersion": {
            "type": "string",
            "maxLength": 16,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "isUnregistered": {
            "type": "boolean",
            "description": "deprecated; use capabilities (CLOUD) instead",
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.10.0"
          },
          "capabilities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/capability",
              "description": "deprecated; use deviceInfo object in devices array"
            },
            "maxItems": 11,
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.10.0"
          },
          "deviceIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "deprecated; use deviceInfo object in devices array"
            },
            "maxItems": 4,
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.10.0"
          }
        },
        "required": [
          "id",
          "name",
          "websocketUrl",
          "softwareVersion",
          "apiVersion",
          "minApiVersion",
          "capabilities",
          "deviceIds"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "playerSetError": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/error",
            "description": "No description available",
            "x-muse-since-version": "1.17.0"
          },
          "reason": {
            "type": "string",
            "maxLength": 256,
            "description": "No description available",
            "x-muse-since-version": "1.17.0"
          },
          "playerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "List of playerIds associated with the error."
            },
            "maxItems": 32,
            "x-muse-since-version": "1.17.0"
          }
        },
        "required": [
          "errorCode",
          "playerIds"
        ],
        "x-muse-since-version": "1.17.0"
      },
      "playerVolume": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "The playerVolume event in the playerVolume namespace indicates changes to the volume for a player, the mute state for the player and whether the player volume is fixed or can be changed.\n\n When your app subscribes to the playerVolume namespace and receives this event, it can update its user interface to reflect the latest group volume and group mute state. For example, if a user configures a CONNECT to have a fixed line-out volume, your app will receive a playerVolume event with the fixed parameter value of true. Your app should then disable its volume slider so users know that volume adjustments are not permitted.",
        "properties": {
          "volume": {
            "type": "integer",
            "format": "int32",
            "maximum": 100,
            "exclusiveMaximum": false,
            "description": "Indicates the volume of the player, between 0 and 100.",
            "x-muse-since-version": "1.0.0"
          },
          "muted": {
            "type": "boolean",
            "description": "Indicates whether or not the group is muted. If true, the group is muted. If false, the group is not muted.",
            "x-muse-since-version": "1.0.0"
          },
          "fixed": {
            "type": "boolean",
            "description": "Indicates whether or not the volume for the player is fixed or changeable. If true, your app cannot change the group volume. If false, your app can change the group volume. For example, the CONNECT has fixed-volume line-level output.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "volume"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "playlist": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "description": "An identifier for the playlist.",
            "x-muse-since-version": "1.8.0"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "A user-identifiable name.",
            "x-muse-since-version": "1.8.0"
          },
          "type": {
            "type": "string",
            "maxLength": 64,
            "description": "The type of list. This is “playlist”.",
            "x-muse-since-version": "1.8.0"
          },
          "trackCount": {
            "type": "integer",
            "format": "int32",
            "description": "The number of tracks in the playlist.",
            "x-muse-since-version": "1.8.0"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "x-muse-since-version": "1.8.0"
      },
      "playlistSummary": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 36,
            "description": "The identifier of the playlist.",
            "x-muse-since-version": "1.8.0"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "The name of the playlist.",
            "x-muse-since-version": "1.8.0"
          },
          "type": {
            "type": "string",
            "maxLength": 64,
            "description": "The item type: “playlist”.",
            "x-muse-since-version": "1.8.0"
          },
          "tracks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/playlistTrack",
              "description": "The individual tracks that make up the playlist. An array of playlistTrack objects."
            },
            "maxItems": 100,
            "x-muse-since-version": "1.8.0"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "x-muse-since-version": "1.8.0"
      },
      "playlistTrack": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "The title of the track.",
            "x-muse-since-version": "1.8.0"
          },
          "album": {
            "type": "string",
            "maxLength": 127,
            "description": "The album associated with the track.",
            "x-muse-since-version": "1.8.0"
          },
          "artist": {
            "type": "string",
            "maxLength": 127,
            "description": "The artist associated with the track.",
            "x-muse-since-version": "1.8.0"
          }
        },
        "x-muse-since-version": "1.8.0"
      },
      "playlistsList": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "version": {
            "type": "string",
            "maxLength": 36,
            "description": "The new version string. Sonos updates this version whenever the Sonos playlists change for the household. Your app can then send a getPlaylists command to receive the new list of playlists.",
            "x-muse-since-version": "1.8.0"
          },
          "playlists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/playlist",
              "description": "An array of playlist objects."
            },
            "maxItems": 100,
            "x-muse-since-version": "1.8.0"
          }
        },
        "x-muse-since-version": "1.8.0"
      },
      "podcast": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 92,
            "description": "The title of the podcast or show",
            "x-muse-since-version": "1.11.0"
          },
          "producer": {
            "$ref": "#/components/schemas/artist",
            "description": "The producer of the podcast (ex. Gimlet Media, NPR, PodcastOne)",
            "x-muse-since-version": "1.11.0"
          },
          "id": {
            "$ref": "#/components/schemas/universalMusicObjectId",
            "description": "No description available",
            "x-muse-since-version": "1.11.0"
          }
        },
        "required": [
          "name"
        ],
        "x-muse-since-version": "1.11.0"
      },
      "positionInformation": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "itemId": {
            "type": "string",
            "maxLength": 128,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "positionMillis": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "itemId"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "priority": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "Sonos uses this enumeration to order concurrent clips.",
        "enum": [
          "LOW",
          "HIGH"
        ],
        "x-muse-since-version": "1.10.0"
      },
      "queueAction": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "No description available",
        "enum": [
          "REPLACE",
          "APPEND",
          "INSERT",
          "INSERT_NEXT"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "queueItem": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "id": {
            "type": "string",
            "maxLength": 128,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "track": {
            "$ref": "#/components/schemas/track",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "deleted": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "policies": {
            "$ref": "#/components/schemas/playbackPolicy",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "queueItemWindow": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "includesBeginningOfQueue": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "includesEndOfQueue": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "contextVersion": {
            "type": "string",
            "maxLength": 64,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "queueVersion": {
            "type": "string",
            "maxLength": 64,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "limitedSkipsState": {
            "$ref": "#/components/schemas/limitedSkipsState",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "windowPlayhead": {
            "$ref": "#/components/schemas/positionInformation",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/queueItem",
              "description": "No description available"
            },
            "maxItems": 20,
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "radioShow": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 127,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "id": {
            "$ref": "#/components/schemas/universalMusicObjectId",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "imageUrl": {
            "type": "string",
            "maxLength": 1024,
            "description": "Replaced by the `images` parameter.",
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagsData",
              "description": "Deprecated in favor of the `explicit` parameter."
            },
            "maxItems": 3,
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          }
        },
        "required": [
          "name"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "reportOptions": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "This cusotmizes reporting in the cloud queue.",
        "properties": {
          "sendUpdateAfterMillis": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "periodicIntervalMillis": {
            "type": "integer",
            "format": "int32",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "sendPlaybackActions": {
            "type": "boolean",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "service": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 31,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "id": {
            "type": "string",
            "maxLength": 10,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "imageUrl": {
            "type": "string",
            "maxLength": 128,
            "description": "Replaced by the `images` parameter.",
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "sessionError": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "The sessionError event in the playbackSession namespace indicates the session error status, such as failures to join and evictions.",
        "properties": {
          "errorCode": {
            "$ref": "#/components/schemas/error",
            "description": "The session error.",
            "x-muse-since-version": "1.0.0"
          },
          "reason": {
            "type": "string",
            "maxLength": 512,
            "description": "The reason for the error. This string is optional, so it may not always be returned. It is in English and not localized. Your app should only use it for debugging purposes.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "sessionInfo": {
        "x-muse-object-type": "event",
        "type": "object",
        "description": "The sessionInfo event in the playbackSession namespace indicates whether a specified session is suspended or not. Players send this event when they go in or out of a suspended state. This event is also delivered upon initially subscribing to a playbackSession.\n\n When an action causes a playbackSession to be suspended, players deliver a suspended value of true to indicate this transition.",
        "properties": {
          "suspended": {
            "type": "boolean",
            "description": "The field is true when the session becomes suspended and false after the user requests to resume the session.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "suspended"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "sessionStateEnum": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "No description available",
        "enum": [
          "SESSION_STATE_CONNECTED"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "sessionStatus": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "The player returns the sessionStatus object type in the response to the createSession, joinSession, or joinOrCreateSession command and indicates whether the session was newly-created or already existing.",
        "properties": {
          "sessionId": {
            "type": "string",
            "maxLength": 46,
            "description": "Identifies the session created or joined.",
            "x-muse-since-version": "1.0.0"
          },
          "sessionState": {
            "$ref": "#/components/schemas/sessionStateEnum",
            "description": "The session state. This will always be SESSION_STATE_CONNECTED, to indicate that the player successfully created the session. If there is an error, your app will receive a sessionError. This parameter may be deprecated in a future release.",
            "x-muse-since-version": "1.0.0"
          },
          "sessionCreated": {
            "type": "boolean",
            "description": "Indicates whether your app joined a newly-created session or an existing session. If true, the player created a new session. If false, the player joined your app to an existing session.",
            "x-muse-since-version": "1.0.0"
          },
          "customData": {
            "type": "string",
            "maxLength": 1023,
            "description": "Up to 1023 bytes of additional data provided when the session was created. Text longer than 1023 bytes is truncated.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "tagsData": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "This generic enum is used to identify information about content. It is too generic,\n as only one key has been defined in 5 years. Therefore, this enum is deprecated in\n favor of the `explicit` parameter.",
        "enum": [
          "TAG_EXPLICIT"
        ],
        "x-muse-since-version": "1.0.0",
        "deprecated": true,
        "x-muse-deprecated-version": "1.21.0"
      },
      "track": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "type": {
            "type": "string",
            "maxLength": 32,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "name": {
            "type": "string",
            "maxLength": 100,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "mediaUrl": {
            "type": "string",
            "maxLength": 1024,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "imageUrl": {
            "type": "string",
            "maxLength": 1024,
            "description": "Replaced by the `images` parameter.",
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          },
          "contentType": {
            "type": "string",
            "maxLength": 255,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "album": {
            "$ref": "#/components/schemas/album",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "artist": {
            "$ref": "#/components/schemas/artist",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "author": {
            "$ref": "#/components/schemas/artist",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "book": {
            "$ref": "#/components/schemas/book",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "narrator": {
            "$ref": "#/components/schemas/artist",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "podcast": {
            "$ref": "#/components/schemas/podcast",
            "description": "If this track is an episode.podcast, then this is the podcast it belongs to.",
            "x-muse-since-version": "1.11.0"
          },
          "releaseDate": {
            "type": "string",
            "maxLength": 64,
            "description": "The date that this content was released.",
            "x-muse-since-version": "1.11.0"
          },
          "producer": {
            "$ref": "#/components/schemas/artist",
            "description": "The producer of the podcast (ex. Gimlet Media, NPR, PodcastOne).",
            "x-muse-since-version": "1.11.0"
          },
          "episodeNumber": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "The incremental number that this episode is in a podcast or show.",
            "x-muse-since-version": "1.11.0"
          },
          "id": {
            "$ref": "#/components/schemas/universalMusicObjectId",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "service": {
            "$ref": "#/components/schemas/service",
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "durationMillis": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "trackNumber": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "chapterNumber": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "exclusiveMinimum": false,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tagsData",
              "description": "Deprecated in favor of the `explicit` parameter."
            },
            "maxItems": 3,
            "x-muse-since-version": "1.0.0",
            "deprecated": true,
            "x-muse-deprecated-version": "1.21.0"
          },
          "quality": {
            "$ref": "#/components/schemas/trackQuality",
            "description": "trackQuality contains raw information to help event subscribers determine the quality of track being played. For instance, client code can use this information to determine the correct badge to use (HD, HiRes, etc...)",
            "x-muse-since-version": "1.24.0"
          },
          "replayGain": {
            "type": "number",
            "format": "float",
            "maximum": 13,
            "exclusiveMaximum": false,
            "minimum": -13,
            "exclusiveMinimum": false,
            "description": "(Optional) The track gain. This field allows for floating value points.\n\n The player applies this normalization to track audio, overriding any value found in the actual\n media. Your service should pass the best dB value that you have. Players will interpret this as\n needed and clamp any values outside of this range. Currently, this range is from -13 dB to +13 dB.\n For example, the player treats a value of 14 as if it were 13. This range is subject to change at\n our discretion. The default replayGain value is zero, which results in no change to the audio\n volume.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "trackQuality": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "bitDepth": {
            "type": "integer",
            "format": "int32",
            "description": "The number of bits per sample of audio.",
            "x-muse-since-version": "1.24.0"
          },
          "sampleRate": {
            "type": "integer",
            "format": "int32",
            "description": "The sample rate (Hz) of the audio.",
            "x-muse-since-version": "1.24.0"
          },
          "codec": {
            "type": "string",
            "maxLength": 16,
            "description": "The name of the codec used to encode the track (e.g. \"mp3\").",
            "x-muse-since-version": "1.24.0"
          },
          "lossless": {
            "type": "boolean",
            "description": "Whether the codec is lossless. Useful for determining whether the track is \"HD\" or \"HiRes\".",
            "x-muse-since-version": "1.24.0"
          },
          "immersive": {
            "type": "boolean",
            "description": "\"Immersive\" is an alias for \"3D\" audio. Determines whether the track is a 3D audio.",
            "x-muse-since-version": "1.24.0"
          }
        },
        "x-muse-since-version": "1.24.0"
      },
      "tvPowerState": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "This enum represents the options to control the TV power state. More states could be added in the future.",
        "enum": [
          "ON",
          "STANDBY"
        ],
        "x-muse-since-version": "1.5.0"
      },
      "universalMusicObjectId": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "Universal Music Object Id\n\n JSON representation:\n {\n \"serviceId\": \"3\",\n \"objectId\": \"tr12345\",\n \"accountId\": \"acct1234\"\n }\n\n Local Library:\n {\n \"objectId\": \"S://ENTERPRISE/media/Music/Radiohead/OK%20Computer\",\n \"serviceId\": \"local-library\",\n \"accountId\": \"mhhid_[household id]\",\n }\n\n The serviceId is equivalent to the \"sid()\" function in RMusicServiceDescriptor.\n RMusicServiceDescriptor::sid() returns an unsigned integer. This is assumed to\n be 32 bits in our system. Therefore, rgchServiceId must be large enough to\n store 4294967295.\n\n The objectId is the object Id from the service. For SMAPI services, it is the\n SMAPI Id. We also have custom code to support Pandora and Rhapsody.\n These size came from inspecting the following constants:\n * SMAPI Ids are based on R_SONOS_MAX_ID_LEN = 256\n * Rhapsody Ids are RRD_ID_LEN = 64\n * Pandora Ids are RPANDORA_MAX_ID_LEN = (128+16) = 144\n\n The accountId is used to identify the account used for listening. We have not\n finalized the format, but we are working with: sn_123123, where the numeric part\n is the account serial number and mhhid_[household id].",
        "properties": {
          "serviceId": {
            "type": "string",
            "maxLength": 20,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "objectId": {
            "type": "string",
            "maxLength": 256,
            "description": "No description available",
            "x-muse-since-version": "1.0.0"
          },
          "accountId": {
            "type": "string",
            "maxLength": 128,
            "description": "The account id linked to this object in one of the following formats: sn_[household id] or mhhid_[household id]",
            "x-muse-since-version": "1.0.0"
          }
        },
        "required": [
          "objectId"
        ],
        "x-muse-since-version": "1.0.0"
      },
      "versionChanged": {
        "x-muse-object-type": "dataType",
        "type": "object",
        "description": "No description available",
        "properties": {
          "version": {
            "type": "string",
            "maxLength": 44,
            "description": "This parameter is an opaque string.",
            "x-muse-since-version": "1.0.0"
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "volumeMode": {
        "x-muse-object-type": "enum",
        "type": "string",
        "description": "No description available",
        "enum": [
          "VARIABLE",
          "FIXED",
          "PASS_THROUGH"
        ],
        "x-muse-since-version": "1.7.0"
      }
    },
    "securitySchemes": {
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://api.sonos.com/login/v3/oauth",
            "scopes": {
              "playback-control-all": "Grants playback control",
              "hh-config": "Grants hh-config access",
              "hh-config-admin": "Grants access to hh-config-admin operations"
            }
          }
        },
        "x-muse-since-version": "1.0.0"
      },
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "Random string access token (sample: 4NFaXYpulWapPTDIxuLGLlxOOfZ9)",
        "x-muse-since-version": "1.0.0"
      }
    }
  }
}